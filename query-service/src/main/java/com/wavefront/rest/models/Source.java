/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * A source (sometimes called host) of time series data from telemetry ingestion
 */
@ApiModel(description = "A source (sometimes called host) of time series data from telemetry ingestion")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class Source {
  @SerializedName("description")
  private String description = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("sourceName")
  private String sourceName = null;

  @SerializedName("tags")
  private Map<String, Boolean> tags = null;

  @SerializedName("creatorId")
  private String creatorId = null;

  @SerializedName("updaterId")
  private String updaterId = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("createdEpochMillis")
  private Long createdEpochMillis = null;

  @SerializedName("updatedEpochMillis")
  private Long updatedEpochMillis = null;

  @SerializedName("markedNewEpochMillis")
  private Long markedNewEpochMillis = null;

  public Source description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of this source
   *
   * @return description
   **/
  @ApiModelProperty(value = "Description of this source")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * A derived field denoting whether this source has been hidden (e.g. excluding it from query autocomplete among other things)
   *
   * @return hidden
   **/
  @ApiModelProperty(value = "A derived field denoting whether this source has been hidden (e.g. excluding it from query autocomplete among other things)")
  public Boolean isHidden() {
    return hidden;
  }

  public Source sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * The name of the source, usually set by ingested telemetry
   *
   * @return sourceName
   **/
  @ApiModelProperty(required = true, value = "The name of the source, usually set by ingested telemetry")
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }

  public Source tags(Map<String, Boolean> tags) {
    this.tags = tags;
    return this;
  }

  public Source putTagsItem(String key, Boolean tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<String, Boolean>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * A Map (String -&gt; boolean) Representing the source tags associated with this source.  To create a tag, set it as a KEY in this map, with associated value equal to true
   *
   * @return tags
   **/
  @ApiModelProperty(value = "A Map (String -> boolean) Representing the source tags associated with this source.  To create a tag, set it as a KEY in this map, with associated value equal to true")
  public Map<String, Boolean> getTags() {
    return tags;
  }

  public void setTags(Map<String, Boolean> tags) {
    this.tags = tags;
  }

  /**
   * Get creatorId
   *
   * @return creatorId
   **/
  @ApiModelProperty(value = "")
  public String getCreatorId() {
    return creatorId;
  }

  /**
   * Get updaterId
   *
   * @return updaterId
   **/
  @ApiModelProperty(value = "")
  public String getUpdaterId() {
    return updaterId;
  }

  public Source id(String id) {
    this.id = id;
    return this;
  }

  /**
   * id of this source, must be exactly equivalent to &#39;sourceName&#39;
   *
   * @return id
   **/
  @ApiModelProperty(required = true, value = "id of this source, must be exactly equivalent to 'sourceName'")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  /**
   * Get createdEpochMillis
   *
   * @return createdEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getCreatedEpochMillis() {
    return createdEpochMillis;
  }

  /**
   * Get updatedEpochMillis
   *
   * @return updatedEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getUpdatedEpochMillis() {
    return updatedEpochMillis;
  }

  public Source markedNewEpochMillis(Long markedNewEpochMillis) {
    this.markedNewEpochMillis = markedNewEpochMillis;
    return this;
  }

  /**
   * Epoch Millis when this source was marked as ~status.new
   *
   * @return markedNewEpochMillis
   **/
  @ApiModelProperty(value = "Epoch Millis when this source was marked as ~status.new")
  public Long getMarkedNewEpochMillis() {
    return markedNewEpochMillis;
  }

  public void setMarkedNewEpochMillis(Long markedNewEpochMillis) {
    this.markedNewEpochMillis = markedNewEpochMillis;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.description, source.description) &&
        Objects.equals(this.hidden, source.hidden) &&
        Objects.equals(this.sourceName, source.sourceName) &&
        Objects.equals(this.tags, source.tags) &&
        Objects.equals(this.creatorId, source.creatorId) &&
        Objects.equals(this.updaterId, source.updaterId) &&
        Objects.equals(this.id, source.id) &&
        Objects.equals(this.createdEpochMillis, source.createdEpochMillis) &&
        Objects.equals(this.updatedEpochMillis, source.updatedEpochMillis) &&
        Objects.equals(this.markedNewEpochMillis, source.markedNewEpochMillis);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, hidden, sourceName, tags, creatorId, updaterId, id, createdEpochMillis, updatedEpochMillis, markedNewEpochMillis);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");

    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    updaterId: ").append(toIndentedString(updaterId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdEpochMillis: ").append(toIndentedString(createdEpochMillis)).append("\n");
    sb.append("    updatedEpochMillis: ").append(toIndentedString(updatedEpochMillis)).append("\n");
    sb.append("    markedNewEpochMillis: ").append(toIndentedString(markedNewEpochMillis)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

