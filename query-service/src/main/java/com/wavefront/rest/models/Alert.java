/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import com.wavefront.rest.models.Event;
import com.wavefront.rest.models.SourceLabelPair;
import com.wavefront.rest.models.TargetInfo;
import com.wavefront.rest.models.WFTags;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Wavefront Alert
 */
@ApiModel(description = "Wavefront Alert")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class Alert {
  @SerializedName("lastEventTime")
  private Long lastEventTime = null;

  /**
   * Severity of the alert
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    INFO("INFO"),

    SMOKE("SMOKE"),

    WARN("WARN"),

    SEVERE("SEVERE");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String text) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SeverityEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("severity")
  private SeverityEnum severity = null;

  @SerializedName("created")
  private Long created = null;

  @SerializedName("hidden")
  private Boolean hidden = null;

  @SerializedName("minutes")
  private Integer minutes = null;

  @SerializedName("tags")
  private WFTags tags = null;

  @SerializedName("status")
  private List<String> status = null;

  @SerializedName("event")
  private Event event = null;

  @SerializedName("updated")
  private Long updated = null;

  @SerializedName("displayExpression")
  private String displayExpression = null;

  @SerializedName("conditionQBEnabled")
  private Boolean conditionQBEnabled = null;

  @SerializedName("displayExpressionQBEnabled")
  private Boolean displayExpressionQBEnabled = null;

  @SerializedName("condition")
  private String condition = null;

  @SerializedName("conditionQBSerialization")
  private String conditionQBSerialization = null;

  @SerializedName("displayExpressionQBSerialization")
  private String displayExpressionQBSerialization = null;

  @SerializedName("includeObsoleteMetrics")
  private Boolean includeObsoleteMetrics = null;

  @SerializedName("processRateMinutes")
  private Integer processRateMinutes = null;

  @SerializedName("lastProcessedMillis")
  private Long lastProcessedMillis = null;

  @SerializedName("updateUserId")
  private String updateUserId = null;

  @SerializedName("inMaintenanceHostLabelPairs")
  private List<SourceLabelPair> inMaintenanceHostLabelPairs = null;

  @SerializedName("failingHostLabelPairs")
  private List<SourceLabelPair> failingHostLabelPairs = null;

  @SerializedName("activeMaintenanceWindows")
  private List<String> activeMaintenanceWindows = null;

  @SerializedName("prefiringHostLabelPairs")
  private List<SourceLabelPair> prefiringHostLabelPairs = null;

  @SerializedName("noDataEvent")
  private Event noDataEvent = null;

  @SerializedName("snoozed")
  private Long snoozed = null;

  @SerializedName("notificants")
  private List<String> notificants = null;

  @SerializedName("additionalInformation")
  private String additionalInformation = null;

  @SerializedName("lastQueryTime")
  private Long lastQueryTime = null;

  @SerializedName("alertsLastDay")
  private Integer alertsLastDay = null;

  @SerializedName("alertsLastWeek")
  private Integer alertsLastWeek = null;

  @SerializedName("alertsLastMonth")
  private Integer alertsLastMonth = null;

  @SerializedName("inTrash")
  private Boolean inTrash = null;

  @SerializedName("queryFailing")
  private Boolean queryFailing = null;

  @SerializedName("createUserId")
  private String createUserId = null;

  @SerializedName("lastFailedTime")
  private Long lastFailedTime = null;

  @SerializedName("lastNotificationMillis")
  private Long lastNotificationMillis = null;

  @SerializedName("pointsScannedAtLastQuery")
  private Long pointsScannedAtLastQuery = null;

  @SerializedName("numPointsInFailureFrame")
  private Integer numPointsInFailureFrame = null;

  @SerializedName("metricsUsed")
  private List<String> metricsUsed = null;

  @SerializedName("hostsUsed")
  private List<String> hostsUsed = null;

  @SerializedName("systemOwned")
  private Boolean systemOwned = null;

  @SerializedName("resolveAfterMinutes")
  private Integer resolveAfterMinutes = null;

  @SerializedName("creatorId")
  private String creatorId = null;

  @SerializedName("updaterId")
  private String updaterId = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("lastErrorMessage")
  private String lastErrorMessage = null;

  @SerializedName("notificationResendFrequencyMinutes")
  private Long notificationResendFrequencyMinutes = null;

  @SerializedName("createdEpochMillis")
  private Long createdEpochMillis = null;

  @SerializedName("updatedEpochMillis")
  private Long updatedEpochMillis = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("targetInfo")
  private List<TargetInfo> targetInfo = null;

  @SerializedName("sortAttr")
  private Integer sortAttr = null;

  @SerializedName("name")
  private String name = null;

  @SerializedName("target")
  private String target = null;

  /**
   * Start time (in epoch millis) of the last event associated with this alert.
   *
   * @return lastEventTime
   **/
  @ApiModelProperty(value = "Start time (in epoch millis) of the last event associated with this alert.")
  public Long getLastEventTime() {
    return lastEventTime;
  }

  public Alert severity(SeverityEnum severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Severity of the alert
   *
   * @return severity
   **/
  @ApiModelProperty(required = true, value = "Severity of the alert")
  public SeverityEnum getSeverity() {
    return severity;
  }

  public void setSeverity(SeverityEnum severity) {
    this.severity = severity;
  }

  /**
   * When this alert was created, in epoch millis
   *
   * @return created
   **/
  @ApiModelProperty(value = "When this alert was created, in epoch millis")
  public Long getCreated() {
    return created;
  }

  /**
   * Get hidden
   *
   * @return hidden
   **/
  @ApiModelProperty(value = "")
  public Boolean isHidden() {
    return hidden;
  }

  public Alert minutes(Integer minutes) {
    this.minutes = minutes;
    return this;
  }

  /**
   * The number of consecutive minutes that a series matching the condition query must evaluate to \&quot;true\&quot; (non-zero value) before the alert fires
   *
   * @return minutes
   **/
  @ApiModelProperty(required = true, value = "The number of consecutive minutes that a series matching the condition query must evaluate to \"true\" (non-zero value) before the alert fires")
  public Integer getMinutes() {
    return minutes;
  }

  public void setMinutes(Integer minutes) {
    this.minutes = minutes;
  }

  public Alert tags(WFTags tags) {
    this.tags = tags;
    return this;
  }

  /**
   * Get tags
   *
   * @return tags
   **/
  @ApiModelProperty(value = "")
  public WFTags getTags() {
    return tags;
  }

  public void setTags(WFTags tags) {
    this.tags = tags;
  }

  public Alert status(List<String> status) {
    this.status = status;
    return this;
  }

  public Alert addStatusItem(String statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<String>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * Lists the current state of the alert. Can be one or more of: FIRING,SNOOZED, IN_MAINTENANCE, INVALID, NONE, CHECKING, TRASH, NO_DATA
   *
   * @return status
   **/
  @ApiModelProperty(value = "Lists the current state of the alert. Can be one or more of: FIRING,SNOOZED, IN_MAINTENANCE, INVALID, NONE, CHECKING, TRASH, NO_DATA")
  public List<String> getStatus() {
    return status;
  }

  public void setStatus(List<String> status) {
    this.status = status;
  }

  public Alert event(Event event) {
    this.event = event;
    return this;
  }

  /**
   * Get event
   *
   * @return event
   **/
  @ApiModelProperty(value = "")
  public Event getEvent() {
    return event;
  }

  public void setEvent(Event event) {
    this.event = event;
  }

  /**
   * When the alert was last updated, in epoch millis
   *
   * @return updated
   **/
  @ApiModelProperty(value = "When the alert was last updated, in epoch millis")
  public Long getUpdated() {
    return updated;
  }

  public Alert displayExpression(String displayExpression) {
    this.displayExpression = displayExpression;
    return this;
  }

  /**
   * A second query whose results are displayed in the alert user interface instead of the condition query. This field is often used to display a version of the condition query with Boolean operators removed so that numerical values are plotted
   *
   * @return displayExpression
   **/
  @ApiModelProperty(value = "A second query whose results are displayed in the alert user interface instead of the condition query. This field is often used to display a version of the condition query with Boolean operators removed so that numerical values are plotted")
  public String getDisplayExpression() {
    return displayExpression;
  }

  public void setDisplayExpression(String displayExpression) {
    this.displayExpression = displayExpression;
  }

  public Alert conditionQBEnabled(Boolean conditionQBEnabled) {
    this.conditionQBEnabled = conditionQBEnabled;
    return this;
  }

  /**
   * Whether the condition query was created using the Query Builder.  Default false
   *
   * @return conditionQBEnabled
   **/
  @ApiModelProperty(value = "Whether the condition query was created using the Query Builder.  Default false")
  public Boolean isConditionQBEnabled() {
    return conditionQBEnabled;
  }

  public void setConditionQBEnabled(Boolean conditionQBEnabled) {
    this.conditionQBEnabled = conditionQBEnabled;
  }

  public Alert displayExpressionQBEnabled(Boolean displayExpressionQBEnabled) {
    this.displayExpressionQBEnabled = displayExpressionQBEnabled;
    return this;
  }

  /**
   * Whether the display expression query was created using the Query Builder. Default false
   *
   * @return displayExpressionQBEnabled
   **/
  @ApiModelProperty(value = "Whether the display expression query was created using the Query Builder. Default false")
  public Boolean isDisplayExpressionQBEnabled() {
    return displayExpressionQBEnabled;
  }

  public void setDisplayExpressionQBEnabled(Boolean displayExpressionQBEnabled) {
    this.displayExpressionQBEnabled = displayExpressionQBEnabled;
  }

  public Alert condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * A Wavefront query that is evaluated at regular intervals (default 1m).  The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes
   *
   * @return condition
   **/
  @ApiModelProperty(required = true, value = "A Wavefront query that is evaluated at regular intervals (default 1m).  The alert fires and notifications are triggered when a data series matching this query evaluates to a non-zero value for a set number of consecutive minutes")
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }

  public Alert conditionQBSerialization(String conditionQBSerialization) {
    this.conditionQBSerialization = conditionQBSerialization;
    return this;
  }

  /**
   * The special serialization of the Query Builder that corresponds to the condition query.  Applicable only when conditionQBEnabled is true
   *
   * @return conditionQBSerialization
   **/
  @ApiModelProperty(value = "The special serialization of the Query Builder that corresponds to the condition query.  Applicable only when conditionQBEnabled is true")
  public String getConditionQBSerialization() {
    return conditionQBSerialization;
  }

  public void setConditionQBSerialization(String conditionQBSerialization) {
    this.conditionQBSerialization = conditionQBSerialization;
  }

  public Alert displayExpressionQBSerialization(String displayExpressionQBSerialization) {
    this.displayExpressionQBSerialization = displayExpressionQBSerialization;
    return this;
  }

  /**
   * The special serialization of the Query Builder that corresponds to the display expression query.  Applicable only when displayExpressionQBEnabled is true
   *
   * @return displayExpressionQBSerialization
   **/
  @ApiModelProperty(value = "The special serialization of the Query Builder that corresponds to the display expression query.  Applicable only when displayExpressionQBEnabled is true")
  public String getDisplayExpressionQBSerialization() {
    return displayExpressionQBSerialization;
  }

  public void setDisplayExpressionQBSerialization(String displayExpressionQBSerialization) {
    this.displayExpressionQBSerialization = displayExpressionQBSerialization;
  }

  public Alert includeObsoleteMetrics(Boolean includeObsoleteMetrics) {
    this.includeObsoleteMetrics = includeObsoleteMetrics;
    return this;
  }

  /**
   * Whether to include obsolete metrics in alert query
   *
   * @return includeObsoleteMetrics
   **/
  @ApiModelProperty(value = "Whether to include obsolete metrics in alert query")
  public Boolean isIncludeObsoleteMetrics() {
    return includeObsoleteMetrics;
  }

  public void setIncludeObsoleteMetrics(Boolean includeObsoleteMetrics) {
    this.includeObsoleteMetrics = includeObsoleteMetrics;
  }

  public Alert processRateMinutes(Integer processRateMinutes) {
    this.processRateMinutes = processRateMinutes;
    return this;
  }

  /**
   * The interval between checks for this alert, in minutes.  Defaults to 1 minute
   *
   * @return processRateMinutes
   **/
  @ApiModelProperty(value = "The interval between checks for this alert, in minutes.  Defaults to 1 minute")
  public Integer getProcessRateMinutes() {
    return processRateMinutes;
  }

  public void setProcessRateMinutes(Integer processRateMinutes) {
    this.processRateMinutes = processRateMinutes;
  }

  /**
   * The time when this alert was last checked, in epoch millis
   *
   * @return lastProcessedMillis
   **/
  @ApiModelProperty(value = "The time when this alert was last checked, in epoch millis")
  public Long getLastProcessedMillis() {
    return lastProcessedMillis;
  }

  /**
   * The user that last updated this alert
   *
   * @return updateUserId
   **/
  @ApiModelProperty(value = "The user that last updated this alert")
  public String getUpdateUserId() {
    return updateUserId;
  }

  public Alert inMaintenanceHostLabelPairs(List<SourceLabelPair> inMaintenanceHostLabelPairs) {
    this.inMaintenanceHostLabelPairs = inMaintenanceHostLabelPairs;
    return this;
  }

  public Alert addInMaintenanceHostLabelPairsItem(SourceLabelPair inMaintenanceHostLabelPairsItem) {
    if (this.inMaintenanceHostLabelPairs == null) {
      this.inMaintenanceHostLabelPairs = new ArrayList<SourceLabelPair>();
    }
    this.inMaintenanceHostLabelPairs.add(inMaintenanceHostLabelPairsItem);
    return this;
  }

  /**
   * Lists the sources that will not be checked for this alert, due to matching a maintenance window
   *
   * @return inMaintenanceHostLabelPairs
   **/
  @ApiModelProperty(value = "Lists the sources that will not be checked for this alert, due to matching a maintenance window")
  public List<SourceLabelPair> getInMaintenanceHostLabelPairs() {
    return inMaintenanceHostLabelPairs;
  }

  public void setInMaintenanceHostLabelPairs(List<SourceLabelPair> inMaintenanceHostLabelPairs) {
    this.inMaintenanceHostLabelPairs = inMaintenanceHostLabelPairs;
  }

  public Alert failingHostLabelPairs(List<SourceLabelPair> failingHostLabelPairs) {
    this.failingHostLabelPairs = failingHostLabelPairs;
    return this;
  }

  public Alert addFailingHostLabelPairsItem(SourceLabelPair failingHostLabelPairsItem) {
    if (this.failingHostLabelPairs == null) {
      this.failingHostLabelPairs = new ArrayList<SourceLabelPair>();
    }
    this.failingHostLabelPairs.add(failingHostLabelPairsItem);
    return this;
  }

  /**
   * Failing host/metric pairs
   *
   * @return failingHostLabelPairs
   **/
  @ApiModelProperty(value = "Failing host/metric pairs")
  public List<SourceLabelPair> getFailingHostLabelPairs() {
    return failingHostLabelPairs;
  }

  public void setFailingHostLabelPairs(List<SourceLabelPair> failingHostLabelPairs) {
    this.failingHostLabelPairs = failingHostLabelPairs;
  }

  public Alert activeMaintenanceWindows(List<String> activeMaintenanceWindows) {
    this.activeMaintenanceWindows = activeMaintenanceWindows;
    return this;
  }

  public Alert addActiveMaintenanceWindowsItem(String activeMaintenanceWindowsItem) {
    if (this.activeMaintenanceWindows == null) {
      this.activeMaintenanceWindows = new ArrayList<String>();
    }
    this.activeMaintenanceWindows.add(activeMaintenanceWindowsItem);
    return this;
  }

  /**
   * The names of the active maintenance windows that are affecting this alert
   *
   * @return activeMaintenanceWindows
   **/
  @ApiModelProperty(value = "The names of the active maintenance windows that are affecting this alert")
  public List<String> getActiveMaintenanceWindows() {
    return activeMaintenanceWindows;
  }

  public void setActiveMaintenanceWindows(List<String> activeMaintenanceWindows) {
    this.activeMaintenanceWindows = activeMaintenanceWindows;
  }

  public Alert prefiringHostLabelPairs(List<SourceLabelPair> prefiringHostLabelPairs) {
    this.prefiringHostLabelPairs = prefiringHostLabelPairs;
    return this;
  }

  public Alert addPrefiringHostLabelPairsItem(SourceLabelPair prefiringHostLabelPairsItem) {
    if (this.prefiringHostLabelPairs == null) {
      this.prefiringHostLabelPairs = new ArrayList<SourceLabelPair>();
    }
    this.prefiringHostLabelPairs.add(prefiringHostLabelPairsItem);
    return this;
  }

  /**
   * Lists the series that are starting to fail, defined as failing for greater than 50% of the checks in the window determined by the \&quot;minutes\&quot; parameter
   *
   * @return prefiringHostLabelPairs
   **/
  @ApiModelProperty(value = "Lists the series that are starting to fail, defined as failing for greater than 50% of the checks in the window determined by the \"minutes\" parameter")
  public List<SourceLabelPair> getPrefiringHostLabelPairs() {
    return prefiringHostLabelPairs;
  }

  public void setPrefiringHostLabelPairs(List<SourceLabelPair> prefiringHostLabelPairs) {
    this.prefiringHostLabelPairs = prefiringHostLabelPairs;
  }

  public Alert noDataEvent(Event noDataEvent) {
    this.noDataEvent = noDataEvent;
    return this;
  }

  /**
   * No data event related to the alert
   *
   * @return noDataEvent
   **/
  @ApiModelProperty(value = "No data event related to the alert")
  public Event getNoDataEvent() {
    return noDataEvent;
  }

  public void setNoDataEvent(Event noDataEvent) {
    this.noDataEvent = noDataEvent;
  }

  public Alert snoozed(Long snoozed) {
    this.snoozed = snoozed;
    return this;
  }

  /**
   * The until which time this alert is snoozed (not checked), in epoch millis.  A negative value implies the alert is snoozed indefinitely
   *
   * @return snoozed
   **/
  @ApiModelProperty(value = "The until which time this alert is snoozed (not checked), in epoch millis.  A negative value implies the alert is snoozed indefinitely")
  public Long getSnoozed() {
    return snoozed;
  }

  public void setSnoozed(Long snoozed) {
    this.snoozed = snoozed;
  }

  public Alert notificants(List<String> notificants) {
    this.notificants = notificants;
    return this;
  }

  public Alert addNotificantsItem(String notificantsItem) {
    if (this.notificants == null) {
      this.notificants = new ArrayList<String>();
    }
    this.notificants.add(notificantsItem);
    return this;
  }

  /**
   * A derived field listing the webhook ids used by this alert
   *
   * @return notificants
   **/
  @ApiModelProperty(value = "A derived field listing the webhook ids used by this alert")
  public List<String> getNotificants() {
    return notificants;
  }

  public void setNotificants(List<String> notificants) {
    this.notificants = notificants;
  }

  public Alert additionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
    return this;
  }

  /**
   * User-supplied additional explanatory information for this alert.  Useful for linking runbooks, mitigations,, etc
   *
   * @return additionalInformation
   **/
  @ApiModelProperty(value = "User-supplied additional explanatory information for this alert.  Useful for linking runbooks, mitigations,, etc")
  public String getAdditionalInformation() {
    return additionalInformation;
  }

  public void setAdditionalInformation(String additionalInformation) {
    this.additionalInformation = additionalInformation;
  }

  /**
   * Last query time of the alert, averaged on hourly basis
   *
   * @return lastQueryTime
   **/
  @ApiModelProperty(value = "Last query time of the alert, averaged on hourly basis")
  public Long getLastQueryTime() {
    return lastQueryTime;
  }

  /**
   * Get alertsLastDay
   *
   * @return alertsLastDay
   **/
  @ApiModelProperty(value = "")
  public Integer getAlertsLastDay() {
    return alertsLastDay;
  }

  /**
   * Get alertsLastWeek
   *
   * @return alertsLastWeek
   **/
  @ApiModelProperty(value = "")
  public Integer getAlertsLastWeek() {
    return alertsLastWeek;
  }

  /**
   * Get alertsLastMonth
   *
   * @return alertsLastMonth
   **/
  @ApiModelProperty(value = "")
  public Integer getAlertsLastMonth() {
    return alertsLastMonth;
  }

  public Alert inTrash(Boolean inTrash) {
    this.inTrash = inTrash;
    return this;
  }

  /**
   * Get inTrash
   *
   * @return inTrash
   **/
  @ApiModelProperty(value = "")
  public Boolean isInTrash() {
    return inTrash;
  }

  public void setInTrash(Boolean inTrash) {
    this.inTrash = inTrash;
  }

  /**
   * Whether there was an exception when the alert condition last ran
   *
   * @return queryFailing
   **/
  @ApiModelProperty(value = "Whether there was an exception when the alert condition last ran")
  public Boolean isQueryFailing() {
    return queryFailing;
  }

  /**
   * Get createUserId
   *
   * @return createUserId
   **/
  @ApiModelProperty(value = "")
  public String getCreateUserId() {
    return createUserId;
  }

  /**
   * The time of the last error encountered when running this alert&#39;s condition query, in epoch millis
   *
   * @return lastFailedTime
   **/
  @ApiModelProperty(value = "The time of the last error encountered when running this alert's condition query, in epoch millis")
  public Long getLastFailedTime() {
    return lastFailedTime;
  }

  /**
   * When this alert last caused a notification, in epoch millis
   *
   * @return lastNotificationMillis
   **/
  @ApiModelProperty(value = "When this alert last caused a notification, in epoch millis")
  public Long getLastNotificationMillis() {
    return lastNotificationMillis;
  }

  /**
   * A derived field recording the number of data points scanned when the system last computed this alert&#39;s condition
   *
   * @return pointsScannedAtLastQuery
   **/
  @ApiModelProperty(value = "A derived field recording the number of data points scanned when the system last computed this alert's condition")
  public Long getPointsScannedAtLastQuery() {
    return pointsScannedAtLastQuery;
  }

  /**
   * Number of points scanned in alert query time frame.
   *
   * @return numPointsInFailureFrame
   **/
  @ApiModelProperty(value = "Number of points scanned in alert query time frame.")
  public Integer getNumPointsInFailureFrame() {
    return numPointsInFailureFrame;
  }

  public Alert metricsUsed(List<String> metricsUsed) {
    this.metricsUsed = metricsUsed;
    return this;
  }

  public Alert addMetricsUsedItem(String metricsUsedItem) {
    if (this.metricsUsed == null) {
      this.metricsUsed = new ArrayList<String>();
    }
    this.metricsUsed.add(metricsUsedItem);
    return this;
  }

  /**
   * Number of metrics checked by the alert condition
   *
   * @return metricsUsed
   **/
  @ApiModelProperty(value = "Number of metrics checked by the alert condition")
  public List<String> getMetricsUsed() {
    return metricsUsed;
  }

  public void setMetricsUsed(List<String> metricsUsed) {
    this.metricsUsed = metricsUsed;
  }

  public Alert hostsUsed(List<String> hostsUsed) {
    this.hostsUsed = hostsUsed;
    return this;
  }

  public Alert addHostsUsedItem(String hostsUsedItem) {
    if (this.hostsUsed == null) {
      this.hostsUsed = new ArrayList<String>();
    }
    this.hostsUsed.add(hostsUsedItem);
    return this;
  }

  /**
   * Number of hosts checked by the alert condition
   *
   * @return hostsUsed
   **/
  @ApiModelProperty(value = "Number of hosts checked by the alert condition")
  public List<String> getHostsUsed() {
    return hostsUsed;
  }

  public void setHostsUsed(List<String> hostsUsed) {
    this.hostsUsed = hostsUsed;
  }

  /**
   * Whether this alert is system-owned and not writeable
   *
   * @return systemOwned
   **/
  @ApiModelProperty(value = "Whether this alert is system-owned and not writeable")
  public Boolean isSystemOwned() {
    return systemOwned;
  }

  public Alert resolveAfterMinutes(Integer resolveAfterMinutes) {
    this.resolveAfterMinutes = resolveAfterMinutes;
    return this;
  }

  /**
   * The number of consecutive minutes that a firing series matching the condition query must evaluate to \&quot;false\&quot; (zero value) before the alert resolves.  When unset, this defaults to the same value as \&quot;minutes\&quot;
   *
   * @return resolveAfterMinutes
   **/
  @ApiModelProperty(value = "The number of consecutive minutes that a firing series matching the condition query must evaluate to \"false\" (zero value) before the alert resolves.  When unset, this defaults to the same value as \"minutes\"")
  public Integer getResolveAfterMinutes() {
    return resolveAfterMinutes;
  }

  public void setResolveAfterMinutes(Integer resolveAfterMinutes) {
    this.resolveAfterMinutes = resolveAfterMinutes;
  }

  /**
   * Get creatorId
   *
   * @return creatorId
   **/
  @ApiModelProperty(value = "")
  public String getCreatorId() {
    return creatorId;
  }

  /**
   * Get updaterId
   *
   * @return updaterId
   **/
  @ApiModelProperty(value = "")
  public String getUpdaterId() {
    return updaterId;
  }

  public Alert id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  /**
   * The last error encountered when running this alert&#39;s condition query
   *
   * @return lastErrorMessage
   **/
  @ApiModelProperty(value = "The last error encountered when running this alert's condition query")
  public String getLastErrorMessage() {
    return lastErrorMessage;
  }

  public Alert notificationResendFrequencyMinutes(Long notificationResendFrequencyMinutes) {
    this.notificationResendFrequencyMinutes = notificationResendFrequencyMinutes;
    return this;
  }

  /**
   * How often to re-trigger a continually failing alert. If absent or &lt;&#x3D; 0, no retriggering occurs
   *
   * @return notificationResendFrequencyMinutes
   **/
  @ApiModelProperty(value = "How often to re-trigger a continually failing alert. If absent or <= 0, no retriggering occurs")
  public Long getNotificationResendFrequencyMinutes() {
    return notificationResendFrequencyMinutes;
  }

  public void setNotificationResendFrequencyMinutes(Long notificationResendFrequencyMinutes) {
    this.notificationResendFrequencyMinutes = notificationResendFrequencyMinutes;
  }

  /**
   * Get createdEpochMillis
   *
   * @return createdEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getCreatedEpochMillis() {
    return createdEpochMillis;
  }

  /**
   * Get updatedEpochMillis
   *
   * @return updatedEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getUpdatedEpochMillis() {
    return updatedEpochMillis;
  }

  /**
   * Get deleted
   *
   * @return deleted
   **/
  @ApiModelProperty(value = "")
  public Boolean isDeleted() {
    return deleted;
  }

  public Alert targetInfo(List<TargetInfo> targetInfo) {
    this.targetInfo = targetInfo;
    return this;
  }

  public Alert addTargetInfoItem(TargetInfo targetInfoItem) {
    if (this.targetInfo == null) {
      this.targetInfo = new ArrayList<TargetInfo>();
    }
    this.targetInfo.add(targetInfoItem);
    return this;
  }

  /**
   * List of alert targets display information that includes name, id and type.
   *
   * @return targetInfo
   **/
  @ApiModelProperty(value = "List of alert targets display information that includes name, id and type.")
  public List<TargetInfo> getTargetInfo() {
    return targetInfo;
  }

  public void setTargetInfo(List<TargetInfo> targetInfo) {
    this.targetInfo = targetInfo;
  }

  /**
   * Attribute used for default alert sort that is derived from state and severity
   *
   * @return sortAttr
   **/
  @ApiModelProperty(value = "Attribute used for default alert sort that is derived from state and severity")
  public Integer getSortAttr() {
    return sortAttr;
  }

  public Alert name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   *
   * @return name
   **/
  @ApiModelProperty(required = true, value = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Alert target(String target) {
    this.target = target;
    return this;
  }

  /**
   * The email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes
   *
   * @return target
   **/
  @ApiModelProperty(required = true, value = "The email address or integration endpoint (such as PagerDuty or webhook) to notify when the alert status changes")
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Alert alert = (Alert) o;
    return Objects.equals(this.lastEventTime, alert.lastEventTime) &&
        Objects.equals(this.severity, alert.severity) &&
        Objects.equals(this.created, alert.created) &&
        Objects.equals(this.hidden, alert.hidden) &&
        Objects.equals(this.minutes, alert.minutes) &&
        Objects.equals(this.tags, alert.tags) &&
        Objects.equals(this.status, alert.status) &&
        Objects.equals(this.event, alert.event) &&
        Objects.equals(this.updated, alert.updated) &&
        Objects.equals(this.displayExpression, alert.displayExpression) &&
        Objects.equals(this.conditionQBEnabled, alert.conditionQBEnabled) &&
        Objects.equals(this.displayExpressionQBEnabled, alert.displayExpressionQBEnabled) &&
        Objects.equals(this.condition, alert.condition) &&
        Objects.equals(this.conditionQBSerialization, alert.conditionQBSerialization) &&
        Objects.equals(this.displayExpressionQBSerialization, alert.displayExpressionQBSerialization) &&
        Objects.equals(this.includeObsoleteMetrics, alert.includeObsoleteMetrics) &&
        Objects.equals(this.processRateMinutes, alert.processRateMinutes) &&
        Objects.equals(this.lastProcessedMillis, alert.lastProcessedMillis) &&
        Objects.equals(this.updateUserId, alert.updateUserId) &&
        Objects.equals(this.inMaintenanceHostLabelPairs, alert.inMaintenanceHostLabelPairs) &&
        Objects.equals(this.failingHostLabelPairs, alert.failingHostLabelPairs) &&
        Objects.equals(this.activeMaintenanceWindows, alert.activeMaintenanceWindows) &&
        Objects.equals(this.prefiringHostLabelPairs, alert.prefiringHostLabelPairs) &&
        Objects.equals(this.noDataEvent, alert.noDataEvent) &&
        Objects.equals(this.snoozed, alert.snoozed) &&
        Objects.equals(this.notificants, alert.notificants) &&
        Objects.equals(this.additionalInformation, alert.additionalInformation) &&
        Objects.equals(this.lastQueryTime, alert.lastQueryTime) &&
        Objects.equals(this.alertsLastDay, alert.alertsLastDay) &&
        Objects.equals(this.alertsLastWeek, alert.alertsLastWeek) &&
        Objects.equals(this.alertsLastMonth, alert.alertsLastMonth) &&
        Objects.equals(this.inTrash, alert.inTrash) &&
        Objects.equals(this.queryFailing, alert.queryFailing) &&
        Objects.equals(this.createUserId, alert.createUserId) &&
        Objects.equals(this.lastFailedTime, alert.lastFailedTime) &&
        Objects.equals(this.lastNotificationMillis, alert.lastNotificationMillis) &&
        Objects.equals(this.pointsScannedAtLastQuery, alert.pointsScannedAtLastQuery) &&
        Objects.equals(this.numPointsInFailureFrame, alert.numPointsInFailureFrame) &&
        Objects.equals(this.metricsUsed, alert.metricsUsed) &&
        Objects.equals(this.hostsUsed, alert.hostsUsed) &&
        Objects.equals(this.systemOwned, alert.systemOwned) &&
        Objects.equals(this.resolveAfterMinutes, alert.resolveAfterMinutes) &&
        Objects.equals(this.creatorId, alert.creatorId) &&
        Objects.equals(this.updaterId, alert.updaterId) &&
        Objects.equals(this.id, alert.id) &&
        Objects.equals(this.lastErrorMessage, alert.lastErrorMessage) &&
        Objects.equals(this.notificationResendFrequencyMinutes, alert.notificationResendFrequencyMinutes) &&
        Objects.equals(this.createdEpochMillis, alert.createdEpochMillis) &&
        Objects.equals(this.updatedEpochMillis, alert.updatedEpochMillis) &&
        Objects.equals(this.deleted, alert.deleted) &&
        Objects.equals(this.targetInfo, alert.targetInfo) &&
        Objects.equals(this.sortAttr, alert.sortAttr) &&
        Objects.equals(this.name, alert.name) &&
        Objects.equals(this.target, alert.target);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastEventTime, severity, created, hidden, minutes, tags, status, event, updated, displayExpression, conditionQBEnabled, displayExpressionQBEnabled, condition, conditionQBSerialization, displayExpressionQBSerialization, includeObsoleteMetrics, processRateMinutes, lastProcessedMillis, updateUserId, inMaintenanceHostLabelPairs, failingHostLabelPairs, activeMaintenanceWindows, prefiringHostLabelPairs, noDataEvent, snoozed, notificants, additionalInformation, lastQueryTime, alertsLastDay, alertsLastWeek, alertsLastMonth, inTrash, queryFailing, createUserId, lastFailedTime, lastNotificationMillis, pointsScannedAtLastQuery, numPointsInFailureFrame, metricsUsed, hostsUsed, systemOwned, resolveAfterMinutes, creatorId, updaterId, id, lastErrorMessage, notificationResendFrequencyMinutes, createdEpochMillis, updatedEpochMillis, deleted, targetInfo, sortAttr, name, target);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Alert {\n");

    sb.append("    lastEventTime: ").append(toIndentedString(lastEventTime)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    hidden: ").append(toIndentedString(hidden)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    displayExpression: ").append(toIndentedString(displayExpression)).append("\n");
    sb.append("    conditionQBEnabled: ").append(toIndentedString(conditionQBEnabled)).append("\n");
    sb.append("    displayExpressionQBEnabled: ").append(toIndentedString(displayExpressionQBEnabled)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    conditionQBSerialization: ").append(toIndentedString(conditionQBSerialization)).append("\n");
    sb.append("    displayExpressionQBSerialization: ").append(toIndentedString(displayExpressionQBSerialization)).append("\n");
    sb.append("    includeObsoleteMetrics: ").append(toIndentedString(includeObsoleteMetrics)).append("\n");
    sb.append("    processRateMinutes: ").append(toIndentedString(processRateMinutes)).append("\n");
    sb.append("    lastProcessedMillis: ").append(toIndentedString(lastProcessedMillis)).append("\n");
    sb.append("    updateUserId: ").append(toIndentedString(updateUserId)).append("\n");
    sb.append("    inMaintenanceHostLabelPairs: ").append(toIndentedString(inMaintenanceHostLabelPairs)).append("\n");
    sb.append("    failingHostLabelPairs: ").append(toIndentedString(failingHostLabelPairs)).append("\n");
    sb.append("    activeMaintenanceWindows: ").append(toIndentedString(activeMaintenanceWindows)).append("\n");
    sb.append("    prefiringHostLabelPairs: ").append(toIndentedString(prefiringHostLabelPairs)).append("\n");
    sb.append("    noDataEvent: ").append(toIndentedString(noDataEvent)).append("\n");
    sb.append("    snoozed: ").append(toIndentedString(snoozed)).append("\n");
    sb.append("    notificants: ").append(toIndentedString(notificants)).append("\n");
    sb.append("    additionalInformation: ").append(toIndentedString(additionalInformation)).append("\n");
    sb.append("    lastQueryTime: ").append(toIndentedString(lastQueryTime)).append("\n");
    sb.append("    alertsLastDay: ").append(toIndentedString(alertsLastDay)).append("\n");
    sb.append("    alertsLastWeek: ").append(toIndentedString(alertsLastWeek)).append("\n");
    sb.append("    alertsLastMonth: ").append(toIndentedString(alertsLastMonth)).append("\n");
    sb.append("    inTrash: ").append(toIndentedString(inTrash)).append("\n");
    sb.append("    queryFailing: ").append(toIndentedString(queryFailing)).append("\n");
    sb.append("    createUserId: ").append(toIndentedString(createUserId)).append("\n");
    sb.append("    lastFailedTime: ").append(toIndentedString(lastFailedTime)).append("\n");
    sb.append("    lastNotificationMillis: ").append(toIndentedString(lastNotificationMillis)).append("\n");
    sb.append("    pointsScannedAtLastQuery: ").append(toIndentedString(pointsScannedAtLastQuery)).append("\n");
    sb.append("    numPointsInFailureFrame: ").append(toIndentedString(numPointsInFailureFrame)).append("\n");
    sb.append("    metricsUsed: ").append(toIndentedString(metricsUsed)).append("\n");
    sb.append("    hostsUsed: ").append(toIndentedString(hostsUsed)).append("\n");
    sb.append("    systemOwned: ").append(toIndentedString(systemOwned)).append("\n");
    sb.append("    resolveAfterMinutes: ").append(toIndentedString(resolveAfterMinutes)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    updaterId: ").append(toIndentedString(updaterId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastErrorMessage: ").append(toIndentedString(lastErrorMessage)).append("\n");
    sb.append("    notificationResendFrequencyMinutes: ").append(toIndentedString(notificationResendFrequencyMinutes)).append("\n");
    sb.append("    createdEpochMillis: ").append(toIndentedString(createdEpochMillis)).append("\n");
    sb.append("    updatedEpochMillis: ").append(toIndentedString(updatedEpochMillis)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    targetInfo: ").append(toIndentedString(targetInfo)).append("\n");
    sb.append("    sortAttr: ").append(toIndentedString(sortAttr)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

