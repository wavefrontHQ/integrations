/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import com.wavefront.rest.models.SearchQuery;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * FacetSearchRequestContainer
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class FacetSearchRequestContainer {
  @SerializedName("limit")
  private Integer limit = null;

  @SerializedName("offset")
  private Integer offset = null;

  @SerializedName("query")
  private List<SearchQuery> query = null;

  @SerializedName("facetQuery")
  private String facetQuery = null;

  /**
   * The matching method used to filter when &#39;facetQuery&#39; is used. Defaults to CONTAINS.
   */
  @JsonAdapter(FacetQueryMatchingMethodEnum.Adapter.class)
  public enum FacetQueryMatchingMethodEnum {
    CONTAINS("CONTAINS"),

    STARTSWITH("STARTSWITH"),

    EXACT("EXACT"),

    TAGPATH("TAGPATH");

    private String value;

    FacetQueryMatchingMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FacetQueryMatchingMethodEnum fromValue(String text) {
      for (FacetQueryMatchingMethodEnum b : FacetQueryMatchingMethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FacetQueryMatchingMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FacetQueryMatchingMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FacetQueryMatchingMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return FacetQueryMatchingMethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("facetQueryMatchingMethod")
  private FacetQueryMatchingMethodEnum facetQueryMatchingMethod = null;

  public FacetSearchRequestContainer limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The number of results to return.  Default: 100
   *
   * @return limit
   **/
  @ApiModelProperty(value = "The number of results to return.  Default: 100")
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }

  public FacetSearchRequestContainer offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * The number of results to skip before returning values.  Default: 0
   *
   * @return offset
   **/
  @ApiModelProperty(value = "The number of results to skip before returning values.  Default: 0")
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }

  public FacetSearchRequestContainer query(List<SearchQuery> query) {
    this.query = query;
    return this;
  }

  public FacetSearchRequestContainer addQueryItem(SearchQuery queryItem) {
    if (this.query == null) {
      this.query = new ArrayList<SearchQuery>();
    }
    this.query.add(queryItem);
    return this;
  }

  /**
   * A list of queries by which to limit the search results.  Entities that match ALL queries in the list are returned
   *
   * @return query
   **/
  @ApiModelProperty(value = "A list of queries by which to limit the search results.  Entities that match ALL queries in the list are returned")
  public List<SearchQuery> getQuery() {
    return query;
  }

  public void setQuery(List<SearchQuery> query) {
    this.query = query;
  }

  public FacetSearchRequestContainer facetQuery(String facetQuery) {
    this.facetQuery = facetQuery;
    return this;
  }

  /**
   * A string against which facet results are compared.  If the facet result CONTAINs, STARTSWITH, or is an EXACT match for this value, as specified by facetQueryMatchingMethod, then it is returned.
   *
   * @return facetQuery
   **/
  @ApiModelProperty(value = "A string against which facet results are compared.  If the facet result CONTAINs, STARTSWITH, or is an EXACT match for this value, as specified by facetQueryMatchingMethod, then it is returned.")
  public String getFacetQuery() {
    return facetQuery;
  }

  public void setFacetQuery(String facetQuery) {
    this.facetQuery = facetQuery;
  }

  public FacetSearchRequestContainer facetQueryMatchingMethod(FacetQueryMatchingMethodEnum facetQueryMatchingMethod) {
    this.facetQueryMatchingMethod = facetQueryMatchingMethod;
    return this;
  }

  /**
   * The matching method used to filter when &#39;facetQuery&#39; is used. Defaults to CONTAINS.
   *
   * @return facetQueryMatchingMethod
   **/
  @ApiModelProperty(value = "The matching method used to filter when 'facetQuery' is used. Defaults to CONTAINS.")
  public FacetQueryMatchingMethodEnum getFacetQueryMatchingMethod() {
    return facetQueryMatchingMethod;
  }

  public void setFacetQueryMatchingMethod(FacetQueryMatchingMethodEnum facetQueryMatchingMethod) {
    this.facetQueryMatchingMethod = facetQueryMatchingMethod;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FacetSearchRequestContainer facetSearchRequestContainer = (FacetSearchRequestContainer) o;
    return Objects.equals(this.limit, facetSearchRequestContainer.limit) &&
        Objects.equals(this.offset, facetSearchRequestContainer.offset) &&
        Objects.equals(this.query, facetSearchRequestContainer.query) &&
        Objects.equals(this.facetQuery, facetSearchRequestContainer.facetQuery) &&
        Objects.equals(this.facetQueryMatchingMethod, facetSearchRequestContainer.facetQueryMatchingMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, offset, query, facetQuery, facetQueryMatchingMethod);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FacetSearchRequestContainer {\n");

    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    facetQuery: ").append(toIndentedString(facetQuery)).append("\n");
    sb.append("    facetQueryMatchingMethod: ").append(toIndentedString(facetQueryMatchingMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

