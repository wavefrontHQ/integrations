/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * MetricStatus
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class MetricStatus {
  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OK("OK"),

    PENDING("PENDING");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("ever")
  private Boolean ever = null;

  @SerializedName("recentExceptNow")
  private Boolean recentExceptNow = null;

  @SerializedName("now")
  private Boolean now = null;

  public MetricStatus status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   *
   * @return status
   **/
  @ApiModelProperty(value = "")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public MetricStatus ever(Boolean ever) {
    this.ever = ever;
    return this;
  }

  /**
   * Get ever
   *
   * @return ever
   **/
  @ApiModelProperty(value = "")
  public Boolean isEver() {
    return ever;
  }

  public void setEver(Boolean ever) {
    this.ever = ever;
  }

  public MetricStatus recentExceptNow(Boolean recentExceptNow) {
    this.recentExceptNow = recentExceptNow;
    return this;
  }

  /**
   * Get recentExceptNow
   *
   * @return recentExceptNow
   **/
  @ApiModelProperty(value = "")
  public Boolean isRecentExceptNow() {
    return recentExceptNow;
  }

  public void setRecentExceptNow(Boolean recentExceptNow) {
    this.recentExceptNow = recentExceptNow;
  }

  public MetricStatus now(Boolean now) {
    this.now = now;
    return this;
  }

  /**
   * Get now
   *
   * @return now
   **/
  @ApiModelProperty(value = "")
  public Boolean isNow() {
    return now;
  }

  public void setNow(Boolean now) {
    this.now = now;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricStatus metricStatus = (MetricStatus) o;
    return Objects.equals(this.status, metricStatus.status) &&
        Objects.equals(this.ever, metricStatus.ever) &&
        Objects.equals(this.recentExceptNow, metricStatus.recentExceptNow) &&
        Objects.equals(this.now, metricStatus.now);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, ever, recentExceptNow, now);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricStatus {\n");

    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    ever: ").append(toIndentedString(ever)).append("\n");
    sb.append("    recentExceptNow: ").append(toIndentedString(recentExceptNow)).append("\n");
    sb.append("    now: ").append(toIndentedString(now)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

