/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import com.wavefront.rest.models.ChartSettings;
import com.wavefront.rest.models.ChartSourceQuery;
import com.wavefront.rest.models.JsonNode;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Representation of a Wavefront chart
 */
@ApiModel(description = "Representation of a Wavefront chart")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class Chart {
  @SerializedName("base")
  private Integer base = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("units")
  private String units = null;

  @SerializedName("interpolatePoints")
  private Boolean interpolatePoints = null;

  @SerializedName("chartSettings")
  private ChartSettings chartSettings = null;

  @SerializedName("chartAttributes")
  private JsonNode chartAttributes = null;

  /**
   * Summarization strategy for the chart.  MEAN is default
   */
  @JsonAdapter(SummarizationEnum.Adapter.class)
  public enum SummarizationEnum {
    MEAN("MEAN"),

    MEDIAN("MEDIAN"),

    MIN("MIN"),

    MAX("MAX"),

    SUM("SUM"),

    COUNT("COUNT"),

    LAST("LAST"),

    FIRST("FIRST");

    private String value;

    SummarizationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SummarizationEnum fromValue(String text) {
      for (SummarizationEnum b : SummarizationEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SummarizationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SummarizationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SummarizationEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return SummarizationEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("summarization")
  private SummarizationEnum summarization = null;

  @SerializedName("sources")
  private List<ChartSourceQuery> sources = new ArrayList<ChartSourceQuery>();

  @SerializedName("includeObsoleteMetrics")
  private Boolean includeObsoleteMetrics = null;

  @SerializedName("noDefaultEvents")
  private Boolean noDefaultEvents = null;

  @SerializedName("name")
  private String name = null;

  public Chart base(Integer base) {
    this.base = base;
    return this;
  }

  /**
   * If the chart has a log-scale Y-axis, the base for the logarithms
   *
   * @return base
   **/
  @ApiModelProperty(value = "If the chart has a log-scale Y-axis, the base for the logarithms")
  public Integer getBase() {
    return base;
  }

  public void setBase(Integer base) {
    this.base = base;
  }

  public Chart description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the chart
   *
   * @return description
   **/
  @ApiModelProperty(value = "Description of the chart")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Chart units(String units) {
    this.units = units;
    return this;
  }

  /**
   * String to label the units of the chart on the Y-axis
   *
   * @return units
   **/
  @ApiModelProperty(value = "String to label the units of the chart on the Y-axis")
  public String getUnits() {
    return units;
  }

  public void setUnits(String units) {
    this.units = units;
  }

  public Chart interpolatePoints(Boolean interpolatePoints) {
    this.interpolatePoints = interpolatePoints;
    return this;
  }

  /**
   * Whether to interpolate points in the charts produced. Default: true
   *
   * @return interpolatePoints
   **/
  @ApiModelProperty(value = "Whether to interpolate points in the charts produced. Default: true")
  public Boolean isInterpolatePoints() {
    return interpolatePoints;
  }

  public void setInterpolatePoints(Boolean interpolatePoints) {
    this.interpolatePoints = interpolatePoints;
  }

  public Chart chartSettings(ChartSettings chartSettings) {
    this.chartSettings = chartSettings;
    return this;
  }

  /**
   * Get chartSettings
   *
   * @return chartSettings
   **/
  @ApiModelProperty(value = "")
  public ChartSettings getChartSettings() {
    return chartSettings;
  }

  public void setChartSettings(ChartSettings chartSettings) {
    this.chartSettings = chartSettings;
  }

  public Chart chartAttributes(JsonNode chartAttributes) {
    this.chartAttributes = chartAttributes;
    return this;
  }

  /**
   * Experimental field for chart attributes
   *
   * @return chartAttributes
   **/
  @ApiModelProperty(value = "Experimental field for chart attributes")
  public JsonNode getChartAttributes() {
    return chartAttributes;
  }

  public void setChartAttributes(JsonNode chartAttributes) {
    this.chartAttributes = chartAttributes;
  }

  public Chart summarization(SummarizationEnum summarization) {
    this.summarization = summarization;
    return this;
  }

  /**
   * Summarization strategy for the chart.  MEAN is default
   *
   * @return summarization
   **/
  @ApiModelProperty(value = "Summarization strategy for the chart.  MEAN is default")
  public SummarizationEnum getSummarization() {
    return summarization;
  }

  public void setSummarization(SummarizationEnum summarization) {
    this.summarization = summarization;
  }

  public Chart sources(List<ChartSourceQuery> sources) {
    this.sources = sources;
    return this;
  }

  public Chart addSourcesItem(ChartSourceQuery sourcesItem) {
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Query expression to plot on the chart
   *
   * @return sources
   **/
  @ApiModelProperty(required = true, value = "Query expression to plot on the chart")
  public List<ChartSourceQuery> getSources() {
    return sources;
  }

  public void setSources(List<ChartSourceQuery> sources) {
    this.sources = sources;
  }

  public Chart includeObsoleteMetrics(Boolean includeObsoleteMetrics) {
    this.includeObsoleteMetrics = includeObsoleteMetrics;
    return this;
  }

  /**
   * Whether to show obsolete metrics.  Default: false
   *
   * @return includeObsoleteMetrics
   **/
  @ApiModelProperty(value = "Whether to show obsolete metrics.  Default: false")
  public Boolean isIncludeObsoleteMetrics() {
    return includeObsoleteMetrics;
  }

  public void setIncludeObsoleteMetrics(Boolean includeObsoleteMetrics) {
    this.includeObsoleteMetrics = includeObsoleteMetrics;
  }

  public Chart noDefaultEvents(Boolean noDefaultEvents) {
    this.noDefaultEvents = noDefaultEvents;
    return this;
  }

  /**
   * Whether to hide events related to the sources in the charts produced. Default false (i.e. shows events)
   *
   * @return noDefaultEvents
   **/
  @ApiModelProperty(value = "Whether to hide events related to the sources in the charts produced. Default false (i.e. shows events)")
  public Boolean isNoDefaultEvents() {
    return noDefaultEvents;
  }

  public void setNoDefaultEvents(Boolean noDefaultEvents) {
    this.noDefaultEvents = noDefaultEvents;
  }

  public Chart name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the source
   *
   * @return name
   **/
  @ApiModelProperty(required = true, value = "Name of the source")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Chart chart = (Chart) o;
    return Objects.equals(this.base, chart.base) &&
        Objects.equals(this.description, chart.description) &&
        Objects.equals(this.units, chart.units) &&
        Objects.equals(this.interpolatePoints, chart.interpolatePoints) &&
        Objects.equals(this.chartSettings, chart.chartSettings) &&
        Objects.equals(this.chartAttributes, chart.chartAttributes) &&
        Objects.equals(this.summarization, chart.summarization) &&
        Objects.equals(this.sources, chart.sources) &&
        Objects.equals(this.includeObsoleteMetrics, chart.includeObsoleteMetrics) &&
        Objects.equals(this.noDefaultEvents, chart.noDefaultEvents) &&
        Objects.equals(this.name, chart.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base, description, units, interpolatePoints, chartSettings, chartAttributes, summarization, sources, includeObsoleteMetrics, noDefaultEvents, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Chart {\n");

    sb.append("    base: ").append(toIndentedString(base)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    interpolatePoints: ").append(toIndentedString(interpolatePoints)).append("\n");
    sb.append("    chartSettings: ").append(toIndentedString(chartSettings)).append("\n");
    sb.append("    chartAttributes: ").append(toIndentedString(chartAttributes)).append("\n");
    sb.append("    summarization: ").append(toIndentedString(summarization)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    includeObsoleteMetrics: ").append(toIndentedString(includeObsoleteMetrics)).append("\n");
    sb.append("    noDefaultEvents: ").append(toIndentedString(noDefaultEvents)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

