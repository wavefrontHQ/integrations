/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Wavefront customer preferences updating model
 */
@ApiModel(description = "Wavefront customer preferences updating model")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class CustomerPreferencesUpdating {
  @SerializedName("showQuerybuilderByDefault")
  private Boolean showQuerybuilderByDefault = null;

  @SerializedName("hideTSWhenQuerybuilderShown")
  private Boolean hideTSWhenQuerybuilderShown = null;

  @SerializedName("landingDashboardSlug")
  private String landingDashboardSlug = null;

  @SerializedName("showOnboarding")
  private Boolean showOnboarding = null;

  @SerializedName("grantModifyAccessToEveryone")
  private Boolean grantModifyAccessToEveryone = null;

  @SerializedName("defaultUserGroups")
  private List<String> defaultUserGroups = null;

  @SerializedName("invitePermissions")
  private List<String> invitePermissions = null;

  public CustomerPreferencesUpdating showQuerybuilderByDefault(Boolean showQuerybuilderByDefault) {
    this.showQuerybuilderByDefault = showQuerybuilderByDefault;
    return this;
  }

  /**
   * Whether the Querybuilder is shown by default
   *
   * @return showQuerybuilderByDefault
   **/
  @ApiModelProperty(required = true, value = "Whether the Querybuilder is shown by default")
  public Boolean isShowQuerybuilderByDefault() {
    return showQuerybuilderByDefault;
  }

  public void setShowQuerybuilderByDefault(Boolean showQuerybuilderByDefault) {
    this.showQuerybuilderByDefault = showQuerybuilderByDefault;
  }

  public CustomerPreferencesUpdating hideTSWhenQuerybuilderShown(Boolean hideTSWhenQuerybuilderShown) {
    this.hideTSWhenQuerybuilderShown = hideTSWhenQuerybuilderShown;
    return this;
  }

  /**
   * Whether to hide TS source input when Querybuilder is shown
   *
   * @return hideTSWhenQuerybuilderShown
   **/
  @ApiModelProperty(required = true, value = "Whether to hide TS source input when Querybuilder is shown")
  public Boolean isHideTSWhenQuerybuilderShown() {
    return hideTSWhenQuerybuilderShown;
  }

  public void setHideTSWhenQuerybuilderShown(Boolean hideTSWhenQuerybuilderShown) {
    this.hideTSWhenQuerybuilderShown = hideTSWhenQuerybuilderShown;
  }

  public CustomerPreferencesUpdating landingDashboardSlug(String landingDashboardSlug) {
    this.landingDashboardSlug = landingDashboardSlug;
    return this;
  }

  /**
   * Dashboard where user will be redirected from landing page
   *
   * @return landingDashboardSlug
   **/
  @ApiModelProperty(value = "Dashboard where user will be redirected from landing page")
  public String getLandingDashboardSlug() {
    return landingDashboardSlug;
  }

  public void setLandingDashboardSlug(String landingDashboardSlug) {
    this.landingDashboardSlug = landingDashboardSlug;
  }

  public CustomerPreferencesUpdating showOnboarding(Boolean showOnboarding) {
    this.showOnboarding = showOnboarding;
    return this;
  }

  /**
   * Whether to show onboarding for any new user without an override
   *
   * @return showOnboarding
   **/
  @ApiModelProperty(required = true, value = "Whether to show onboarding for any new user without an override")
  public Boolean isShowOnboarding() {
    return showOnboarding;
  }

  public void setShowOnboarding(Boolean showOnboarding) {
    this.showOnboarding = showOnboarding;
  }

  public CustomerPreferencesUpdating grantModifyAccessToEveryone(Boolean grantModifyAccessToEveryone) {
    this.grantModifyAccessToEveryone = grantModifyAccessToEveryone;
    return this;
  }

  /**
   * Whether modify access of new entites is granted to Everyone or to the Creator
   *
   * @return grantModifyAccessToEveryone
   **/
  @ApiModelProperty(required = true, value = "Whether modify access of new entites is granted to Everyone or to the Creator")
  public Boolean isGrantModifyAccessToEveryone() {
    return grantModifyAccessToEveryone;
  }

  public void setGrantModifyAccessToEveryone(Boolean grantModifyAccessToEveryone) {
    this.grantModifyAccessToEveryone = grantModifyAccessToEveryone;
  }

  public CustomerPreferencesUpdating defaultUserGroups(List<String> defaultUserGroups) {
    this.defaultUserGroups = defaultUserGroups;
    return this;
  }

  public CustomerPreferencesUpdating addDefaultUserGroupsItem(String defaultUserGroupsItem) {
    if (this.defaultUserGroups == null) {
      this.defaultUserGroups = new ArrayList<String>();
    }
    this.defaultUserGroups.add(defaultUserGroupsItem);
    return this;
  }

  /**
   * List of default user groups of the customer
   *
   * @return defaultUserGroups
   **/
  @ApiModelProperty(value = "List of default user groups of the customer")
  public List<String> getDefaultUserGroups() {
    return defaultUserGroups;
  }

  public void setDefaultUserGroups(List<String> defaultUserGroups) {
    this.defaultUserGroups = defaultUserGroups;
  }

  public CustomerPreferencesUpdating invitePermissions(List<String> invitePermissions) {
    this.invitePermissions = invitePermissions;
    return this;
  }

  public CustomerPreferencesUpdating addInvitePermissionsItem(String invitePermissionsItem) {
    if (this.invitePermissions == null) {
      this.invitePermissions = new ArrayList<String>();
    }
    this.invitePermissions.add(invitePermissionsItem);
    return this;
  }

  /**
   * List of invite permissions to apply for each new user
   *
   * @return invitePermissions
   **/
  @ApiModelProperty(value = "List of invite permissions to apply for each new user")
  public List<String> getInvitePermissions() {
    return invitePermissions;
  }

  public void setInvitePermissions(List<String> invitePermissions) {
    this.invitePermissions = invitePermissions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomerPreferencesUpdating customerPreferencesUpdating = (CustomerPreferencesUpdating) o;
    return Objects.equals(this.showQuerybuilderByDefault, customerPreferencesUpdating.showQuerybuilderByDefault) &&
        Objects.equals(this.hideTSWhenQuerybuilderShown, customerPreferencesUpdating.hideTSWhenQuerybuilderShown) &&
        Objects.equals(this.landingDashboardSlug, customerPreferencesUpdating.landingDashboardSlug) &&
        Objects.equals(this.showOnboarding, customerPreferencesUpdating.showOnboarding) &&
        Objects.equals(this.grantModifyAccessToEveryone, customerPreferencesUpdating.grantModifyAccessToEveryone) &&
        Objects.equals(this.defaultUserGroups, customerPreferencesUpdating.defaultUserGroups) &&
        Objects.equals(this.invitePermissions, customerPreferencesUpdating.invitePermissions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(showQuerybuilderByDefault, hideTSWhenQuerybuilderShown, landingDashboardSlug, showOnboarding, grantModifyAccessToEveryone, defaultUserGroups, invitePermissions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomerPreferencesUpdating {\n");

    sb.append("    showQuerybuilderByDefault: ").append(toIndentedString(showQuerybuilderByDefault)).append("\n");
    sb.append("    hideTSWhenQuerybuilderShown: ").append(toIndentedString(hideTSWhenQuerybuilderShown)).append("\n");
    sb.append("    landingDashboardSlug: ").append(toIndentedString(landingDashboardSlug)).append("\n");
    sb.append("    showOnboarding: ").append(toIndentedString(showOnboarding)).append("\n");
    sb.append("    grantModifyAccessToEveryone: ").append(toIndentedString(grantModifyAccessToEveryone)).append("\n");
    sb.append("    defaultUserGroups: ").append(toIndentedString(defaultUserGroups)).append("\n");
    sb.append("    invitePermissions: ").append(toIndentedString(invitePermissions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

