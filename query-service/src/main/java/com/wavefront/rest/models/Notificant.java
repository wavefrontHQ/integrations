/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Wavefront notificant entity
 */
@ApiModel(description = "Wavefront notificant entity")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class Notificant {
  /**
   * The value of the Content-Type header of the webhook POST request.
   */
  @JsonAdapter(ContentTypeEnum.Adapter.class)
  public enum ContentTypeEnum {
    APPLICATION_JSON("application/json"),

    TEXT_HTML("text/html"),

    TEXT_PLAIN("text/plain"),

    APPLICATION_X_WWW_FORM_URLENCODED("application/x-www-form-urlencoded"),

    EMPTY("");

    private String value;

    ContentTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentTypeEnum fromValue(String text) {
      for (ContentTypeEnum b : ContentTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ContentTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ContentTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("contentType")
  private ContentTypeEnum contentType = null;

  @SerializedName("description")
  private String description = null;

  /**
   * The notification method used for notification target.
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    WEBHOOK("WEBHOOK"),

    EMAIL("EMAIL"),

    PAGERDUTY("PAGERDUTY");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String text) {
      for (MethodEnum b : MethodEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return MethodEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("method")
  private MethodEnum method = null;

  @SerializedName("customerId")
  private String customerId = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("creatorId")
  private String creatorId = null;

  @SerializedName("updaterId")
  private String updaterId = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("template")
  private String template = null;

  @SerializedName("createdEpochMillis")
  private Long createdEpochMillis = null;

  @SerializedName("updatedEpochMillis")
  private Long updatedEpochMillis = null;

  /**
   * Gets or Sets triggers
   */
  @JsonAdapter(TriggersEnum.Adapter.class)
  public enum TriggersEnum {
    OPENED("ALERT_OPENED"),

    UPDATED("ALERT_UPDATED"),

    RESOLVED("ALERT_RESOLVED"),

    MAINTENANCE("ALERT_MAINTENANCE"),

    SNOOZED("ALERT_SNOOZED"),

    INVALID("ALERT_INVALID"),

    NO_LONGER_INVALID("ALERT_NO_LONGER_INVALID"),

    TESTING("ALERT_TESTING"),

    RETRIGGERED("ALERT_RETRIGGERED"),

    NO_DATA("ALERT_NO_DATA"),

    NO_DATA_RESOLVED("ALERT_NO_DATA_RESOLVED"),

    NO_DATA_MAINTENANCE("ALERT_NO_DATA_MAINTENANCE");

    private String value;

    TriggersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggersEnum fromValue(String text) {
      for (TriggersEnum b : TriggersEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<TriggersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggersEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TriggersEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("triggers")
  private List<TriggersEnum> triggers = new ArrayList<TriggersEnum>();

  @SerializedName("recipient")
  private String recipient = null;

  @SerializedName("customHttpHeaders")
  private Map<String, String> customHttpHeaders = null;

  @SerializedName("emailSubject")
  private String emailSubject = null;

  @SerializedName("isHtmlContent")
  private Boolean isHtmlContent = null;

  public Notificant contentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The value of the Content-Type header of the webhook POST request.
   *
   * @return contentType
   **/
  @ApiModelProperty(value = "The value of the Content-Type header of the webhook POST request.")
  public ContentTypeEnum getContentType() {
    return contentType;
  }

  public void setContentType(ContentTypeEnum contentType) {
    this.contentType = contentType;
  }

  public Notificant description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description
   *
   * @return description
   **/
  @ApiModelProperty(required = true, value = "Description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Notificant method(MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * The notification method used for notification target.
   *
   * @return method
   **/
  @ApiModelProperty(required = true, value = "The notification method used for notification target.")
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(MethodEnum method) {
    this.method = method;
  }

  /**
   * Get customerId
   *
   * @return customerId
   **/
  @ApiModelProperty(value = "")
  public String getCustomerId() {
    return customerId;
  }

  public Notificant title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title
   *
   * @return title
   **/
  @ApiModelProperty(required = true, value = "Title")
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }

  /**
   * Get creatorId
   *
   * @return creatorId
   **/
  @ApiModelProperty(value = "")
  public String getCreatorId() {
    return creatorId;
  }

  /**
   * Get updaterId
   *
   * @return updaterId
   **/
  @ApiModelProperty(value = "")
  public String getUpdaterId() {
    return updaterId;
  }

  public Notificant id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Notificant template(String template) {
    this.template = template;
    return this;
  }

  /**
   * A mustache template that will form the body of the POST request, email and summary of the PagerDuty.
   *
   * @return template
   **/
  @ApiModelProperty(required = true, value = "A mustache template that will form the body of the POST request, email and summary of the PagerDuty.")
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }

  /**
   * Get createdEpochMillis
   *
   * @return createdEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getCreatedEpochMillis() {
    return createdEpochMillis;
  }

  /**
   * Get updatedEpochMillis
   *
   * @return updatedEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getUpdatedEpochMillis() {
    return updatedEpochMillis;
  }

  public Notificant triggers(List<TriggersEnum> triggers) {
    this.triggers = triggers;
    return this;
  }

  public Notificant addTriggersItem(TriggersEnum triggersItem) {
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * A list of occurrences on which this webhook will be fired.  Valid values are ALERT_OPENED, ALERT_UPDATED, ALERT_RESOLVED, ALERT_MAINTENANCE, ALERT_SNOOZED
   *
   * @return triggers
   **/
  @ApiModelProperty(required = true, value = "A list of occurrences on which this webhook will be fired.  Valid values are ALERT_OPENED, ALERT_UPDATED, ALERT_RESOLVED, ALERT_MAINTENANCE, ALERT_SNOOZED")
  public List<TriggersEnum> getTriggers() {
    return triggers;
  }

  public void setTriggers(List<TriggersEnum> triggers) {
    this.triggers = triggers;
  }

  public Notificant recipient(String recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * The end point for the notification target.EMAIL: email address.  PAGERDUTY: PagerDuty routing Key.  WEBHOOK: URL end point
   *
   * @return recipient
   **/
  @ApiModelProperty(required = true, value = "The end point for the notification target.EMAIL: email address.  PAGERDUTY: PagerDuty routing Key.  WEBHOOK: URL end point")
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(String recipient) {
    this.recipient = recipient;
  }

  public Notificant customHttpHeaders(Map<String, String> customHttpHeaders) {
    this.customHttpHeaders = customHttpHeaders;
    return this;
  }

  public Notificant putCustomHttpHeadersItem(String key, String customHttpHeadersItem) {
    if (this.customHttpHeaders == null) {
      this.customHttpHeaders = new HashMap<String, String>();
    }
    this.customHttpHeaders.put(key, customHttpHeadersItem);
    return this;
  }

  /**
   * A string-&gt;string map specifying the custom HTTP header key / value pairs that will be sent in the requests of this web hook
   *
   * @return customHttpHeaders
   **/
  @ApiModelProperty(value = "A string->string map specifying the custom HTTP header key / value pairs that will be sent in the requests of this web hook")
  public Map<String, String> getCustomHttpHeaders() {
    return customHttpHeaders;
  }

  public void setCustomHttpHeaders(Map<String, String> customHttpHeaders) {
    this.customHttpHeaders = customHttpHeaders;
  }

  public Notificant emailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
    return this;
  }

  /**
   * The subject title of an email notification target
   *
   * @return emailSubject
   **/
  @ApiModelProperty(value = "The subject title of an email notification target")
  public String getEmailSubject() {
    return emailSubject;
  }

  public void setEmailSubject(String emailSubject) {
    this.emailSubject = emailSubject;
  }

  public Notificant isHtmlContent(Boolean isHtmlContent) {
    this.isHtmlContent = isHtmlContent;
    return this;
  }

  /**
   * Determine whether the email alert target content is sent as html or text.
   *
   * @return isHtmlContent
   **/
  @ApiModelProperty(value = "Determine whether the email alert target content is sent as html or text.")
  public Boolean isIsHtmlContent() {
    return isHtmlContent;
  }

  public void setIsHtmlContent(Boolean isHtmlContent) {
    this.isHtmlContent = isHtmlContent;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Notificant notificant = (Notificant) o;
    return Objects.equals(this.contentType, notificant.contentType) &&
        Objects.equals(this.description, notificant.description) &&
        Objects.equals(this.method, notificant.method) &&
        Objects.equals(this.customerId, notificant.customerId) &&
        Objects.equals(this.title, notificant.title) &&
        Objects.equals(this.creatorId, notificant.creatorId) &&
        Objects.equals(this.updaterId, notificant.updaterId) &&
        Objects.equals(this.id, notificant.id) &&
        Objects.equals(this.template, notificant.template) &&
        Objects.equals(this.createdEpochMillis, notificant.createdEpochMillis) &&
        Objects.equals(this.updatedEpochMillis, notificant.updatedEpochMillis) &&
        Objects.equals(this.triggers, notificant.triggers) &&
        Objects.equals(this.recipient, notificant.recipient) &&
        Objects.equals(this.customHttpHeaders, notificant.customHttpHeaders) &&
        Objects.equals(this.emailSubject, notificant.emailSubject) &&
        Objects.equals(this.isHtmlContent, notificant.isHtmlContent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, description, method, customerId, title, creatorId, updaterId, id, template, createdEpochMillis, updatedEpochMillis, triggers, recipient, customHttpHeaders, emailSubject, isHtmlContent);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Notificant {\n");

    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    updaterId: ").append(toIndentedString(updaterId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    createdEpochMillis: ").append(toIndentedString(createdEpochMillis)).append("\n");
    sb.append("    updatedEpochMillis: ").append(toIndentedString(updatedEpochMillis)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    customHttpHeaders: ").append(toIndentedString(customHttpHeaders)).append("\n");
    sb.append("    emailSubject: ").append(toIndentedString(emailSubject)).append("\n");
    sb.append("    isHtmlContent: ").append(toIndentedString(isHtmlContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

