/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Saved queries for searches over Wavefront entities
 */
@ApiModel(description = "Saved queries for searches over Wavefront entities")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class SavedSearch {
  /**
   * The Wavefront entity type over which to search
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    DASHBOARD("DASHBOARD"),

    ALERT("ALERT"),

    MAINTENANCE_WINDOW("MAINTENANCE_WINDOW"),

    NOTIFICANT("NOTIFICANT"),

    EVENT("EVENT"),

    SOURCE("SOURCE"),

    EXTERNAL_LINK("EXTERNAL_LINK"),

    AGENT("AGENT"),

    CLOUD_INTEGRATION("CLOUD_INTEGRATION"),

    APPLICATION("APPLICATION"),

    REGISTERED_QUERY("REGISTERED_QUERY"),

    USER("USER"),

    USER_GROUP("USER_GROUP");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String text) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return EntityTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("entityType")
  private EntityTypeEnum entityType = null;

  @SerializedName("query")
  private Map<String, String> query = new HashMap<String, String>();

  @SerializedName("creatorId")
  private String creatorId = null;

  @SerializedName("updaterId")
  private String updaterId = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("createdEpochMillis")
  private Long createdEpochMillis = null;

  @SerializedName("updatedEpochMillis")
  private Long updatedEpochMillis = null;

  @SerializedName("userId")
  private String userId = null;

  public SavedSearch entityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * The Wavefront entity type over which to search
   *
   * @return entityType
   **/
  @ApiModelProperty(required = true, value = "The Wavefront entity type over which to search")
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(EntityTypeEnum entityType) {
    this.entityType = entityType;
  }

  public SavedSearch query(Map<String, String> query) {
    this.query = query;
    return this;
  }

  public SavedSearch putQueryItem(String key, String queryItem) {
    this.query.put(key, queryItem);
    return this;
  }

  /**
   * The map corresponding to the search query.  The key is the name of the query, and the value is a JSON representation of the query
   *
   * @return query
   **/
  @ApiModelProperty(required = true, value = "The map corresponding to the search query.  The key is the name of the query, and the value is a JSON representation of the query")
  public Map<String, String> getQuery() {
    return query;
  }

  public void setQuery(Map<String, String> query) {
    this.query = query;
  }

  /**
   * Get creatorId
   *
   * @return creatorId
   **/
  @ApiModelProperty(value = "")
  public String getCreatorId() {
    return creatorId;
  }

  /**
   * Get updaterId
   *
   * @return updaterId
   **/
  @ApiModelProperty(value = "")
  public String getUpdaterId() {
    return updaterId;
  }

  public SavedSearch id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  /**
   * Get createdEpochMillis
   *
   * @return createdEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getCreatedEpochMillis() {
    return createdEpochMillis;
  }

  /**
   * Get updatedEpochMillis
   *
   * @return updatedEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getUpdatedEpochMillis() {
    return updatedEpochMillis;
  }

  /**
   * The user for whom this search is saved
   *
   * @return userId
   **/
  @ApiModelProperty(value = "The user for whom this search is saved")
  public String getUserId() {
    return userId;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SavedSearch savedSearch = (SavedSearch) o;
    return Objects.equals(this.entityType, savedSearch.entityType) &&
        Objects.equals(this.query, savedSearch.query) &&
        Objects.equals(this.creatorId, savedSearch.creatorId) &&
        Objects.equals(this.updaterId, savedSearch.updaterId) &&
        Objects.equals(this.id, savedSearch.id) &&
        Objects.equals(this.createdEpochMillis, savedSearch.createdEpochMillis) &&
        Objects.equals(this.updatedEpochMillis, savedSearch.updatedEpochMillis) &&
        Objects.equals(this.userId, savedSearch.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(entityType, query, creatorId, updaterId, id, createdEpochMillis, updatedEpochMillis, userId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SavedSearch {\n");

    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    updaterId: ").append(toIndentedString(updaterId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdEpochMillis: ").append(toIndentedString(createdEpochMillis)).append("\n");
    sb.append("    updatedEpochMillis: ").append(toIndentedString(updatedEpochMillis)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

