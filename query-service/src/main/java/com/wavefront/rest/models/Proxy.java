/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import com.wavefront.rest.models.Event;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;

/**
 * Wavefront forwarding proxy
 */
@ApiModel(description = "Wavefront forwarding proxy")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class Proxy {
  @SerializedName("version")
  private String version = null;

  /**
   * the proxy&#39;s status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("ACTIVE"),

    STOPPED_UNKNOWN("STOPPED_UNKNOWN"),

    STOPPED_BY_SERVER("STOPPED_BY_SERVER");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("customerId")
  private String customerId = null;

  @SerializedName("inTrash")
  private Boolean inTrash = null;

  @SerializedName("hostname")
  private String hostname = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("lastCheckInTime")
  private Long lastCheckInTime = null;

  @SerializedName("lastKnownError")
  private String lastKnownError = null;

  @SerializedName("lastErrorTime")
  private Long lastErrorTime = null;

  @SerializedName("lastErrorEvent")
  private Event lastErrorEvent = null;

  @SerializedName("timeDrift")
  private Long timeDrift = null;

  @SerializedName("bytesLeftForBuffer")
  private Long bytesLeftForBuffer = null;

  @SerializedName("bytesPerMinuteForBuffer")
  private Long bytesPerMinuteForBuffer = null;

  @SerializedName("localQueueSize")
  private Long localQueueSize = null;

  @SerializedName("sshAgent")
  private Boolean sshAgent = null;

  @SerializedName("ephemeral")
  private Boolean ephemeral = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("statusCause")
  private String statusCause = null;

  @SerializedName("name")
  private String name = null;

  /**
   * Get version
   *
   * @return version
   **/
  @ApiModelProperty(value = "")
  public String getVersion() {
    return version;
  }

  /**
   * the proxy&#39;s status
   *
   * @return status
   **/
  @ApiModelProperty(value = "the proxy's status")
  public StatusEnum getStatus() {
    return status;
  }

  /**
   * Get customerId
   *
   * @return customerId
   **/
  @ApiModelProperty(value = "")
  public String getCustomerId() {
    return customerId;
  }

  /**
   * Get inTrash
   *
   * @return inTrash
   **/
  @ApiModelProperty(value = "")
  public Boolean isInTrash() {
    return inTrash;
  }

  /**
   * Host name of the machine running the proxy
   *
   * @return hostname
   **/
  @ApiModelProperty(value = "Host name of the machine running the proxy")
  public String getHostname() {
    return hostname;
  }

  public Proxy id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  /**
   * Last time when this proxy checked in (in milliseconds since the unix epoch)
   *
   * @return lastCheckInTime
   **/
  @ApiModelProperty(value = "Last time when this proxy checked in (in milliseconds since the unix epoch)")
  public Long getLastCheckInTime() {
    return lastCheckInTime;
  }

  /**
   * deprecated
   *
   * @return lastKnownError
   **/
  @ApiModelProperty(value = "deprecated")
  public String getLastKnownError() {
    return lastKnownError;
  }

  /**
   * deprecated
   *
   * @return lastErrorTime
   **/
  @ApiModelProperty(value = "deprecated")
  public Long getLastErrorTime() {
    return lastErrorTime;
  }

  public Proxy lastErrorEvent(Event lastErrorEvent) {
    this.lastErrorEvent = lastErrorEvent;
    return this;
  }

  /**
   * Get lastErrorEvent
   *
   * @return lastErrorEvent
   **/
  @ApiModelProperty(value = "")
  public Event getLastErrorEvent() {
    return lastErrorEvent;
  }

  public void setLastErrorEvent(Event lastErrorEvent) {
    this.lastErrorEvent = lastErrorEvent;
  }

  /**
   * Time drift of the proxy&#39;s clock compared to Wavefront servers
   *
   * @return timeDrift
   **/
  @ApiModelProperty(value = "Time drift of the proxy's clock compared to Wavefront servers")
  public Long getTimeDrift() {
    return timeDrift;
  }

  /**
   * Number of bytes of space remaining in the persistent disk queue of this proxy
   *
   * @return bytesLeftForBuffer
   **/
  @ApiModelProperty(value = "Number of bytes of space remaining in the persistent disk queue of this proxy")
  public Long getBytesLeftForBuffer() {
    return bytesLeftForBuffer;
  }

  /**
   * Bytes used per minute by the persistent disk queue of this proxy
   *
   * @return bytesPerMinuteForBuffer
   **/
  @ApiModelProperty(value = "Bytes used per minute by the persistent disk queue of this proxy")
  public Long getBytesPerMinuteForBuffer() {
    return bytesPerMinuteForBuffer;
  }

  /**
   * Number of items in the persistent disk queue of this proxy
   *
   * @return localQueueSize
   **/
  @ApiModelProperty(value = "Number of items in the persistent disk queue of this proxy")
  public Long getLocalQueueSize() {
    return localQueueSize;
  }

  /**
   * deprecated
   *
   * @return sshAgent
   **/
  @ApiModelProperty(value = "deprecated")
  public Boolean isSshAgent() {
    return sshAgent;
  }

  /**
   * When true, this proxy is expected to be ephemeral (possibly hosted on a short-lived container) and will be deleted after a period of inactivity (not checking in)
   *
   * @return ephemeral
   **/
  @ApiModelProperty(value = "When true, this proxy is expected to be ephemeral (possibly hosted on a short-lived container) and will be deleted after a period of inactivity (not checking in)")
  public Boolean isEphemeral() {
    return ephemeral;
  }

  public Proxy deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   *
   * @return deleted
   **/
  @ApiModelProperty(value = "")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  /**
   * The reason why the proxy is in current status
   *
   * @return statusCause
   **/
  @ApiModelProperty(value = "The reason why the proxy is in current status")
  public String getStatusCause() {
    return statusCause;
  }

  public Proxy name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Proxy name (modifiable)
   *
   * @return name
   **/
  @ApiModelProperty(required = true, value = "Proxy name (modifiable)")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Proxy proxy = (Proxy) o;
    return Objects.equals(this.version, proxy.version) &&
        Objects.equals(this.status, proxy.status) &&
        Objects.equals(this.customerId, proxy.customerId) &&
        Objects.equals(this.inTrash, proxy.inTrash) &&
        Objects.equals(this.hostname, proxy.hostname) &&
        Objects.equals(this.id, proxy.id) &&
        Objects.equals(this.lastCheckInTime, proxy.lastCheckInTime) &&
        Objects.equals(this.lastKnownError, proxy.lastKnownError) &&
        Objects.equals(this.lastErrorTime, proxy.lastErrorTime) &&
        Objects.equals(this.lastErrorEvent, proxy.lastErrorEvent) &&
        Objects.equals(this.timeDrift, proxy.timeDrift) &&
        Objects.equals(this.bytesLeftForBuffer, proxy.bytesLeftForBuffer) &&
        Objects.equals(this.bytesPerMinuteForBuffer, proxy.bytesPerMinuteForBuffer) &&
        Objects.equals(this.localQueueSize, proxy.localQueueSize) &&
        Objects.equals(this.sshAgent, proxy.sshAgent) &&
        Objects.equals(this.ephemeral, proxy.ephemeral) &&
        Objects.equals(this.deleted, proxy.deleted) &&
        Objects.equals(this.statusCause, proxy.statusCause) &&
        Objects.equals(this.name, proxy.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(version, status, customerId, inTrash, hostname, id, lastCheckInTime, lastKnownError, lastErrorTime, lastErrorEvent, timeDrift, bytesLeftForBuffer, bytesPerMinuteForBuffer, localQueueSize, sshAgent, ephemeral, deleted, statusCause, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Proxy {\n");

    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    inTrash: ").append(toIndentedString(inTrash)).append("\n");
    sb.append("    hostname: ").append(toIndentedString(hostname)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastCheckInTime: ").append(toIndentedString(lastCheckInTime)).append("\n");
    sb.append("    lastKnownError: ").append(toIndentedString(lastKnownError)).append("\n");
    sb.append("    lastErrorTime: ").append(toIndentedString(lastErrorTime)).append("\n");
    sb.append("    lastErrorEvent: ").append(toIndentedString(lastErrorEvent)).append("\n");
    sb.append("    timeDrift: ").append(toIndentedString(timeDrift)).append("\n");
    sb.append("    bytesLeftForBuffer: ").append(toIndentedString(bytesLeftForBuffer)).append("\n");
    sb.append("    bytesPerMinuteForBuffer: ").append(toIndentedString(bytesPerMinuteForBuffer)).append("\n");
    sb.append("    localQueueSize: ").append(toIndentedString(localQueueSize)).append("\n");
    sb.append("    sshAgent: ").append(toIndentedString(sshAgent)).append("\n");
    sb.append("    ephemeral: ").append(toIndentedString(ephemeral)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    statusCause: ").append(toIndentedString(statusCause)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

