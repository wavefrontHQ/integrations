/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import com.wavefront.rest.models.IntegrationAlert;
import com.wavefront.rest.models.IntegrationAlias;
import com.wavefront.rest.models.IntegrationDashboard;
import com.wavefront.rest.models.IntegrationMetrics;
import com.wavefront.rest.models.IntegrationStatus;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Wavefront integrations are a set of incoming metrics along with a bundle of functionality (initially dashboards but alerts, webhooks, and the like in the near future
 */
@ApiModel(description = "Wavefront integrations are a set of incoming metrics along with a bundle of functionality (initially dashboards but alerts, webhooks, and the like in the near future")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class Integration {
  @SerializedName("icon")
  private String icon = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("metrics")
  private IntegrationMetrics metrics = null;

  @SerializedName("version")
  private String version = null;

  @SerializedName("baseUrl")
  private String baseUrl = null;

  @SerializedName("status")
  private IntegrationStatus status = null;

  @SerializedName("alerts")
  private List<IntegrationAlert> alerts = null;

  @SerializedName("creatorId")
  private String creatorId = null;

  @SerializedName("updaterId")
  private String updaterId = null;

  @SerializedName("id")
  private String id = null;

  @SerializedName("createdEpochMillis")
  private Long createdEpochMillis = null;

  @SerializedName("updatedEpochMillis")
  private Long updatedEpochMillis = null;

  @SerializedName("aliasOf")
  private String aliasOf = null;

  @SerializedName("aliasIntegrations")
  private List<IntegrationAlias> aliasIntegrations = null;

  @SerializedName("dashboards")
  private List<IntegrationDashboard> dashboards = null;

  @SerializedName("deleted")
  private Boolean deleted = null;

  @SerializedName("overview")
  private String overview = null;

  @SerializedName("setup")
  private String setup = null;

  @SerializedName("name")
  private String name = null;

  public Integration icon(String icon) {
    this.icon = icon;
    return this;
  }

  /**
   * URI path to the integration icon
   *
   * @return icon
   **/
  @ApiModelProperty(required = true, value = "URI path to the integration icon")
  public String getIcon() {
    return icon;
  }

  public void setIcon(String icon) {
    this.icon = icon;
  }

  public Integration description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Integration description
   *
   * @return description
   **/
  @ApiModelProperty(required = true, value = "Integration description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public Integration metrics(IntegrationMetrics metrics) {
    this.metrics = metrics;
    return this;
  }

  /**
   * Get metrics
   *
   * @return metrics
   **/
  @ApiModelProperty(value = "")
  public IntegrationMetrics getMetrics() {
    return metrics;
  }

  public void setMetrics(IntegrationMetrics metrics) {
    this.metrics = metrics;
  }

  public Integration version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Integration version string
   *
   * @return version
   **/
  @ApiModelProperty(required = true, value = "Integration version string")
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public Integration baseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
    return this;
  }

  /**
   * Base URL for this integration&#39;s assets
   *
   * @return baseUrl
   **/
  @ApiModelProperty(value = "Base URL for this integration's assets")
  public String getBaseUrl() {
    return baseUrl;
  }

  public void setBaseUrl(String baseUrl) {
    this.baseUrl = baseUrl;
  }

  public Integration status(IntegrationStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   *
   * @return status
   **/
  @ApiModelProperty(value = "")
  public IntegrationStatus getStatus() {
    return status;
  }

  public void setStatus(IntegrationStatus status) {
    this.status = status;
  }

  public Integration alerts(List<IntegrationAlert> alerts) {
    this.alerts = alerts;
    return this;
  }

  public Integration addAlertsItem(IntegrationAlert alertsItem) {
    if (this.alerts == null) {
      this.alerts = new ArrayList<IntegrationAlert>();
    }
    this.alerts.add(alertsItem);
    return this;
  }

  /**
   * A list of alerts belonging to this integration
   *
   * @return alerts
   **/
  @ApiModelProperty(value = "A list of alerts belonging to this integration")
  public List<IntegrationAlert> getAlerts() {
    return alerts;
  }

  public void setAlerts(List<IntegrationAlert> alerts) {
    this.alerts = alerts;
  }

  public Integration creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * Get creatorId
   *
   * @return creatorId
   **/
  @ApiModelProperty(value = "")
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }

  public Integration updaterId(String updaterId) {
    this.updaterId = updaterId;
    return this;
  }

  /**
   * Get updaterId
   *
   * @return updaterId
   **/
  @ApiModelProperty(value = "")
  public String getUpdaterId() {
    return updaterId;
  }

  public void setUpdaterId(String updaterId) {
    this.updaterId = updaterId;
  }

  public Integration id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   *
   * @return id
   **/
  @ApiModelProperty(value = "")
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public Integration createdEpochMillis(Long createdEpochMillis) {
    this.createdEpochMillis = createdEpochMillis;
    return this;
  }

  /**
   * Get createdEpochMillis
   *
   * @return createdEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getCreatedEpochMillis() {
    return createdEpochMillis;
  }

  public void setCreatedEpochMillis(Long createdEpochMillis) {
    this.createdEpochMillis = createdEpochMillis;
  }

  public Integration updatedEpochMillis(Long updatedEpochMillis) {
    this.updatedEpochMillis = updatedEpochMillis;
    return this;
  }

  /**
   * Get updatedEpochMillis
   *
   * @return updatedEpochMillis
   **/
  @ApiModelProperty(value = "")
  public Long getUpdatedEpochMillis() {
    return updatedEpochMillis;
  }

  public void setUpdatedEpochMillis(Long updatedEpochMillis) {
    this.updatedEpochMillis = updatedEpochMillis;
  }

  public Integration aliasOf(String aliasOf) {
    this.aliasOf = aliasOf;
    return this;
  }

  /**
   * If set, designates this integration as an alias integration, of the integration whose id is specified.
   *
   * @return aliasOf
   **/
  @ApiModelProperty(value = "If set, designates this integration as an alias integration, of the integration whose id is specified.")
  public String getAliasOf() {
    return aliasOf;
  }

  public void setAliasOf(String aliasOf) {
    this.aliasOf = aliasOf;
  }

  public Integration aliasIntegrations(List<IntegrationAlias> aliasIntegrations) {
    this.aliasIntegrations = aliasIntegrations;
    return this;
  }

  public Integration addAliasIntegrationsItem(IntegrationAlias aliasIntegrationsItem) {
    if (this.aliasIntegrations == null) {
      this.aliasIntegrations = new ArrayList<IntegrationAlias>();
    }
    this.aliasIntegrations.add(aliasIntegrationsItem);
    return this;
  }

  /**
   * If set, a list of objects describing integrations that alias this one.
   *
   * @return aliasIntegrations
   **/
  @ApiModelProperty(value = "If set, a list of objects describing integrations that alias this one.")
  public List<IntegrationAlias> getAliasIntegrations() {
    return aliasIntegrations;
  }

  public void setAliasIntegrations(List<IntegrationAlias> aliasIntegrations) {
    this.aliasIntegrations = aliasIntegrations;
  }

  public Integration dashboards(List<IntegrationDashboard> dashboards) {
    this.dashboards = dashboards;
    return this;
  }

  public Integration addDashboardsItem(IntegrationDashboard dashboardsItem) {
    if (this.dashboards == null) {
      this.dashboards = new ArrayList<IntegrationDashboard>();
    }
    this.dashboards.add(dashboardsItem);
    return this;
  }

  /**
   * A list of dashboards belonging to this integration
   *
   * @return dashboards
   **/
  @ApiModelProperty(value = "A list of dashboards belonging to this integration")
  public List<IntegrationDashboard> getDashboards() {
    return dashboards;
  }

  public void setDashboards(List<IntegrationDashboard> dashboards) {
    this.dashboards = dashboards;
  }

  public Integration deleted(Boolean deleted) {
    this.deleted = deleted;
    return this;
  }

  /**
   * Get deleted
   *
   * @return deleted
   **/
  @ApiModelProperty(value = "")
  public Boolean isDeleted() {
    return deleted;
  }

  public void setDeleted(Boolean deleted) {
    this.deleted = deleted;
  }

  public Integration overview(String overview) {
    this.overview = overview;
    return this;
  }

  /**
   * Descriptive text giving an overview of integration functionality
   *
   * @return overview
   **/
  @ApiModelProperty(value = "Descriptive text giving an overview of integration functionality")
  public String getOverview() {
    return overview;
  }

  public void setOverview(String overview) {
    this.overview = overview;
  }

  public Integration setup(String setup) {
    this.setup = setup;
    return this;
  }

  /**
   * How the integration will be set-up
   *
   * @return setup
   **/
  @ApiModelProperty(value = "How the integration will be set-up")
  public String getSetup() {
    return setup;
  }

  public void setSetup(String setup) {
    this.setup = setup;
  }

  public Integration name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Integration name
   *
   * @return name
   **/
  @ApiModelProperty(required = true, value = "Integration name")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Integration integration = (Integration) o;
    return Objects.equals(this.icon, integration.icon) &&
        Objects.equals(this.description, integration.description) &&
        Objects.equals(this.metrics, integration.metrics) &&
        Objects.equals(this.version, integration.version) &&
        Objects.equals(this.baseUrl, integration.baseUrl) &&
        Objects.equals(this.status, integration.status) &&
        Objects.equals(this.alerts, integration.alerts) &&
        Objects.equals(this.creatorId, integration.creatorId) &&
        Objects.equals(this.updaterId, integration.updaterId) &&
        Objects.equals(this.id, integration.id) &&
        Objects.equals(this.createdEpochMillis, integration.createdEpochMillis) &&
        Objects.equals(this.updatedEpochMillis, integration.updatedEpochMillis) &&
        Objects.equals(this.aliasOf, integration.aliasOf) &&
        Objects.equals(this.aliasIntegrations, integration.aliasIntegrations) &&
        Objects.equals(this.dashboards, integration.dashboards) &&
        Objects.equals(this.deleted, integration.deleted) &&
        Objects.equals(this.overview, integration.overview) &&
        Objects.equals(this.setup, integration.setup) &&
        Objects.equals(this.name, integration.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(icon, description, metrics, version, baseUrl, status, alerts, creatorId, updaterId, id, createdEpochMillis, updatedEpochMillis, aliasOf, aliasIntegrations, dashboards, deleted, overview, setup, name);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Integration {\n");

    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    baseUrl: ").append(toIndentedString(baseUrl)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    alerts: ").append(toIndentedString(alerts)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    updaterId: ").append(toIndentedString(updaterId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdEpochMillis: ").append(toIndentedString(createdEpochMillis)).append("\n");
    sb.append("    updatedEpochMillis: ").append(toIndentedString(updatedEpochMillis)).append("\n");
    sb.append("    aliasOf: ").append(toIndentedString(aliasOf)).append("\n");
    sb.append("    aliasIntegrations: ").append(toIndentedString(aliasIntegrations)).append("\n");
    sb.append("    dashboards: ").append(toIndentedString(dashboards)).append("\n");
    sb.append("    deleted: ").append(toIndentedString(deleted)).append("\n");
    sb.append("    overview: ").append(toIndentedString(overview)).append("\n");
    sb.append("    setup: ").append(toIndentedString(setup)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

