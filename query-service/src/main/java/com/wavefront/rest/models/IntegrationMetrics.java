/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import com.wavefront.rest.models.Chart;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Definition of the metrics belonging this integration
 */
@ApiModel(description = "Definition of the metrics belonging this integration")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class IntegrationMetrics {
  @SerializedName("prefixes")
  private List<String> prefixes = new ArrayList<String>();

  @SerializedName("display")
  private List<String> display = new ArrayList<String>();

  @SerializedName("charts")
  private List<String> charts = new ArrayList<String>();

  @SerializedName("chartObjs")
  private List<Chart> chartObjs = null;

  @SerializedName("required")
  private List<String> required = new ArrayList<String>();

  @SerializedName("ppsDimensions")
  private List<String> ppsDimensions = null;

  public IntegrationMetrics prefixes(List<String> prefixes) {
    this.prefixes = prefixes;
    return this;
  }

  public IntegrationMetrics addPrefixesItem(String prefixesItem) {
    this.prefixes.add(prefixesItem);
    return this;
  }

  /**
   * Set of metric prefix namespaces belonging to this integration
   *
   * @return prefixes
   **/
  @ApiModelProperty(required = true, value = "Set of metric prefix namespaces belonging to this integration")
  public List<String> getPrefixes() {
    return prefixes;
  }

  public void setPrefixes(List<String> prefixes) {
    this.prefixes = prefixes;
  }

  public IntegrationMetrics display(List<String> display) {
    this.display = display;
    return this;
  }

  public IntegrationMetrics addDisplayItem(String displayItem) {
    this.display.add(displayItem);
    return this;
  }

  /**
   * Set of metrics that are displayed in the metric panel during integration setup
   *
   * @return display
   **/
  @ApiModelProperty(required = true, value = "Set of metrics that are displayed in the metric panel during integration setup")
  public List<String> getDisplay() {
    return display;
  }

  public void setDisplay(List<String> display) {
    this.display = display;
  }

  public IntegrationMetrics charts(List<String> charts) {
    this.charts = charts;
    return this;
  }

  public IntegrationMetrics addChartsItem(String chartsItem) {
    this.charts.add(chartsItem);
    return this;
  }

  /**
   * URLs for JSON definitions of charts that display info about this integration&#39;s metrics
   *
   * @return charts
   **/
  @ApiModelProperty(required = true, value = "URLs for JSON definitions of charts that display info about this integration's metrics")
  public List<String> getCharts() {
    return charts;
  }

  public void setCharts(List<String> charts) {
    this.charts = charts;
  }

  public IntegrationMetrics chartObjs(List<Chart> chartObjs) {
    this.chartObjs = chartObjs;
    return this;
  }

  public IntegrationMetrics addChartObjsItem(Chart chartObjsItem) {
    if (this.chartObjs == null) {
      this.chartObjs = new ArrayList<Chart>();
    }
    this.chartObjs.add(chartObjsItem);
    return this;
  }

  /**
   * Chart JSONs materialized from the links in &#x60;charts&#x60;
   *
   * @return chartObjs
   **/
  @ApiModelProperty(value = "Chart JSONs materialized from the links in `charts`")
  public List<Chart> getChartObjs() {
    return chartObjs;
  }

  public void setChartObjs(List<Chart> chartObjs) {
    this.chartObjs = chartObjs;
  }

  public IntegrationMetrics required(List<String> required) {
    this.required = required;
    return this;
  }

  public IntegrationMetrics addRequiredItem(String requiredItem) {
    this.required.add(requiredItem);
    return this;
  }

  /**
   * Set of \&quot;canary\&quot; metrics that define the \&quot;liveness\&quot; of this integration&#39;s metric ingestion
   *
   * @return required
   **/
  @ApiModelProperty(required = true, value = "Set of \"canary\" metrics that define the \"liveness\" of this integration's metric ingestion")
  public List<String> getRequired() {
    return required;
  }

  public void setRequired(List<String> required) {
    this.required = required;
  }

  public IntegrationMetrics ppsDimensions(List<String> ppsDimensions) {
    this.ppsDimensions = ppsDimensions;
    return this;
  }

  public IntegrationMetrics addPpsDimensionsItem(String ppsDimensionsItem) {
    if (this.ppsDimensions == null) {
      this.ppsDimensions = new ArrayList<String>();
    }
    this.ppsDimensions.add(ppsDimensionsItem);
    return this;
  }

  /**
   * For reported points belonging to this integration, these point tags are escalated to the internal point-rate counters so that reporting can be broken out by these dimensions
   *
   * @return ppsDimensions
   **/
  @ApiModelProperty(value = "For reported points belonging to this integration, these point tags are escalated to the internal point-rate counters so that reporting can be broken out by these dimensions")
  public List<String> getPpsDimensions() {
    return ppsDimensions;
  }

  public void setPpsDimensions(List<String> ppsDimensions) {
    this.ppsDimensions = ppsDimensions;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationMetrics integrationMetrics = (IntegrationMetrics) o;
    return Objects.equals(this.prefixes, integrationMetrics.prefixes) &&
        Objects.equals(this.display, integrationMetrics.display) &&
        Objects.equals(this.charts, integrationMetrics.charts) &&
        Objects.equals(this.chartObjs, integrationMetrics.chartObjs) &&
        Objects.equals(this.required, integrationMetrics.required) &&
        Objects.equals(this.ppsDimensions, integrationMetrics.ppsDimensions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefixes, display, charts, chartObjs, required, ppsDimensions);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationMetrics {\n");

    sb.append("    prefixes: ").append(toIndentedString(prefixes)).append("\n");
    sb.append("    display: ").append(toIndentedString(display)).append("\n");
    sb.append("    charts: ").append(toIndentedString(charts)).append("\n");
    sb.append("    chartObjs: ").append(toIndentedString(chartObjs)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    ppsDimensions: ").append(toIndentedString(ppsDimensions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

