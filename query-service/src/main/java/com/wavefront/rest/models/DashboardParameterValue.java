/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.models;

import java.util.Objects;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * DashboardParameterValue
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-02-25T16:34:08.557+05:30")
public class DashboardParameterValue {
  @SerializedName("label")
  private String label = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Gets or Sets parameterType
   */
  @JsonAdapter(ParameterTypeEnum.Adapter.class)
  public enum ParameterTypeEnum {
    SIMPLE("SIMPLE"),

    LIST("LIST"),

    DYNAMIC("DYNAMIC");

    private String value;

    ParameterTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ParameterTypeEnum fromValue(String text) {
      for (ParameterTypeEnum b : ParameterTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ParameterTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ParameterTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ParameterTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ParameterTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("parameterType")
  private ParameterTypeEnum parameterType = null;

  @SerializedName("defaultValue")
  private String defaultValue = null;

  @SerializedName("valuesToReadableStrings")
  private Map<String, String> valuesToReadableStrings = null;

  /**
   * Gets or Sets dynamicFieldType
   */
  @JsonAdapter(DynamicFieldTypeEnum.Adapter.class)
  public enum DynamicFieldTypeEnum {
    SOURCE("SOURCE"),

    SOURCE_TAG("SOURCE_TAG"),

    METRIC_NAME("METRIC_NAME"),

    TAG_KEY("TAG_KEY"),

    MATCHING_SOURCE_TAG("MATCHING_SOURCE_TAG");

    private String value;

    DynamicFieldTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DynamicFieldTypeEnum fromValue(String text) {
      for (DynamicFieldTypeEnum b : DynamicFieldTypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<DynamicFieldTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DynamicFieldTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DynamicFieldTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return DynamicFieldTypeEnum.fromValue(String.valueOf(value));
      }
    }
  }

  @SerializedName("dynamicFieldType")
  private DynamicFieldTypeEnum dynamicFieldType = null;

  @SerializedName("queryValue")
  private String queryValue = null;

  @SerializedName("hideFromView")
  private Boolean hideFromView = null;

  @SerializedName("tagKey")
  private String tagKey = null;

  @SerializedName("multivalue")
  private Boolean multivalue = null;

  @SerializedName("allowAll")
  private Boolean allowAll = null;

  @SerializedName("reverseDynSort")
  private Boolean reverseDynSort = null;

  public DashboardParameterValue label(String label) {
    this.label = label;
    return this;
  }

  /**
   * Get label
   *
   * @return label
   **/
  @ApiModelProperty(value = "")
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }

  public DashboardParameterValue description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   *
   * @return description
   **/
  @ApiModelProperty(value = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public DashboardParameterValue parameterType(ParameterTypeEnum parameterType) {
    this.parameterType = parameterType;
    return this;
  }

  /**
   * Get parameterType
   *
   * @return parameterType
   **/
  @ApiModelProperty(value = "")
  public ParameterTypeEnum getParameterType() {
    return parameterType;
  }

  public void setParameterType(ParameterTypeEnum parameterType) {
    this.parameterType = parameterType;
  }

  public DashboardParameterValue defaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
    return this;
  }

  /**
   * Get defaultValue
   *
   * @return defaultValue
   **/
  @ApiModelProperty(value = "")
  public String getDefaultValue() {
    return defaultValue;
  }

  public void setDefaultValue(String defaultValue) {
    this.defaultValue = defaultValue;
  }

  public DashboardParameterValue valuesToReadableStrings(Map<String, String> valuesToReadableStrings) {
    this.valuesToReadableStrings = valuesToReadableStrings;
    return this;
  }

  public DashboardParameterValue putValuesToReadableStringsItem(String key, String valuesToReadableStringsItem) {
    if (this.valuesToReadableStrings == null) {
      this.valuesToReadableStrings = new HashMap<String, String>();
    }
    this.valuesToReadableStrings.put(key, valuesToReadableStringsItem);
    return this;
  }

  /**
   * Get valuesToReadableStrings
   *
   * @return valuesToReadableStrings
   **/
  @ApiModelProperty(value = "")
  public Map<String, String> getValuesToReadableStrings() {
    return valuesToReadableStrings;
  }

  public void setValuesToReadableStrings(Map<String, String> valuesToReadableStrings) {
    this.valuesToReadableStrings = valuesToReadableStrings;
  }

  public DashboardParameterValue dynamicFieldType(DynamicFieldTypeEnum dynamicFieldType) {
    this.dynamicFieldType = dynamicFieldType;
    return this;
  }

  /**
   * Get dynamicFieldType
   *
   * @return dynamicFieldType
   **/
  @ApiModelProperty(value = "")
  public DynamicFieldTypeEnum getDynamicFieldType() {
    return dynamicFieldType;
  }

  public void setDynamicFieldType(DynamicFieldTypeEnum dynamicFieldType) {
    this.dynamicFieldType = dynamicFieldType;
  }

  public DashboardParameterValue queryValue(String queryValue) {
    this.queryValue = queryValue;
    return this;
  }

  /**
   * Get queryValue
   *
   * @return queryValue
   **/
  @ApiModelProperty(value = "")
  public String getQueryValue() {
    return queryValue;
  }

  public void setQueryValue(String queryValue) {
    this.queryValue = queryValue;
  }

  public DashboardParameterValue hideFromView(Boolean hideFromView) {
    this.hideFromView = hideFromView;
    return this;
  }

  /**
   * Get hideFromView
   *
   * @return hideFromView
   **/
  @ApiModelProperty(value = "")
  public Boolean isHideFromView() {
    return hideFromView;
  }

  public void setHideFromView(Boolean hideFromView) {
    this.hideFromView = hideFromView;
  }

  public DashboardParameterValue tagKey(String tagKey) {
    this.tagKey = tagKey;
    return this;
  }

  /**
   * Get tagKey
   *
   * @return tagKey
   **/
  @ApiModelProperty(value = "")
  public String getTagKey() {
    return tagKey;
  }

  public void setTagKey(String tagKey) {
    this.tagKey = tagKey;
  }

  public DashboardParameterValue multivalue(Boolean multivalue) {
    this.multivalue = multivalue;
    return this;
  }

  /**
   * Get multivalue
   *
   * @return multivalue
   **/
  @ApiModelProperty(value = "")
  public Boolean isMultivalue() {
    return multivalue;
  }

  public void setMultivalue(Boolean multivalue) {
    this.multivalue = multivalue;
  }

  public DashboardParameterValue allowAll(Boolean allowAll) {
    this.allowAll = allowAll;
    return this;
  }

  /**
   * Get allowAll
   *
   * @return allowAll
   **/
  @ApiModelProperty(value = "")
  public Boolean isAllowAll() {
    return allowAll;
  }

  public void setAllowAll(Boolean allowAll) {
    this.allowAll = allowAll;
  }

  public DashboardParameterValue reverseDynSort(Boolean reverseDynSort) {
    this.reverseDynSort = reverseDynSort;
    return this;
  }

  /**
   * Whether to reverse alphabetically sort the returned result.
   *
   * @return reverseDynSort
   **/
  @ApiModelProperty(value = "Whether to reverse alphabetically sort the returned result.")
  public Boolean isReverseDynSort() {
    return reverseDynSort;
  }

  public void setReverseDynSort(Boolean reverseDynSort) {
    this.reverseDynSort = reverseDynSort;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DashboardParameterValue dashboardParameterValue = (DashboardParameterValue) o;
    return Objects.equals(this.label, dashboardParameterValue.label) &&
        Objects.equals(this.description, dashboardParameterValue.description) &&
        Objects.equals(this.parameterType, dashboardParameterValue.parameterType) &&
        Objects.equals(this.defaultValue, dashboardParameterValue.defaultValue) &&
        Objects.equals(this.valuesToReadableStrings, dashboardParameterValue.valuesToReadableStrings) &&
        Objects.equals(this.dynamicFieldType, dashboardParameterValue.dynamicFieldType) &&
        Objects.equals(this.queryValue, dashboardParameterValue.queryValue) &&
        Objects.equals(this.hideFromView, dashboardParameterValue.hideFromView) &&
        Objects.equals(this.tagKey, dashboardParameterValue.tagKey) &&
        Objects.equals(this.multivalue, dashboardParameterValue.multivalue) &&
        Objects.equals(this.allowAll, dashboardParameterValue.allowAll) &&
        Objects.equals(this.reverseDynSort, dashboardParameterValue.reverseDynSort);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, description, parameterType, defaultValue, valuesToReadableStrings, dynamicFieldType, queryValue, hideFromView, tagKey, multivalue, allowAll, reverseDynSort);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DashboardParameterValue {\n");

    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    parameterType: ").append(toIndentedString(parameterType)).append("\n");
    sb.append("    defaultValue: ").append(toIndentedString(defaultValue)).append("\n");
    sb.append("    valuesToReadableStrings: ").append(toIndentedString(valuesToReadableStrings)).append("\n");
    sb.append("    dynamicFieldType: ").append(toIndentedString(dynamicFieldType)).append("\n");
    sb.append("    queryValue: ").append(toIndentedString(queryValue)).append("\n");
    sb.append("    hideFromView: ").append(toIndentedString(hideFromView)).append("\n");
    sb.append("    tagKey: ").append(toIndentedString(tagKey)).append("\n");
    sb.append("    multivalue: ").append(toIndentedString(multivalue)).append("\n");
    sb.append("    allowAll: ").append(toIndentedString(allowAll)).append("\n");
    sb.append("    reverseDynSort: ").append(toIndentedString(reverseDynSort)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

