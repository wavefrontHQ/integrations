/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.MetricDetailsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetricApi {
  private ApiClient apiClient;

  public MetricApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MetricApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for getMetricDetails
   *
   * @param m                       Metric name (required)
   * @param l                       limit (optional)
   * @param c                       cursor value to continue if the number of results exceeds 1000 (optional)
   * @param h                       glob pattern for sources to include in the query result (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getMetricDetailsCall(String m, Integer l, String c, List<String> h, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/chart/metric/detail";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (m != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("m", m));
    if (l != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("l", l));
    if (c != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("c", c));
    if (h != null)
      localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("multi", "h", h));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json", "application/x-javascript", "application/javascript"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getMetricDetailsValidateBeforeCall(String m, Integer l, String c, List<String> h, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'm' is set
    if (m == null) {
      throw new ApiException("Missing the required parameter 'm' when calling getMetricDetails(Async)");
    }


    com.squareup.okhttp.Call call = getMetricDetailsCall(m, l, c, h, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get more details on a metric, including reporting sources and approximate last time reported
   *
   * @param m Metric name (required)
   * @param l limit (optional)
   * @param c cursor value to continue if the number of results exceeds 1000 (optional)
   * @param h glob pattern for sources to include in the query result (optional)
   * @return MetricDetailsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public MetricDetailsResponse getMetricDetails(String m, Integer l, String c, List<String> h) throws ApiException {
    ApiResponse<MetricDetailsResponse> resp = getMetricDetailsWithHttpInfo(m, l, c, h);
    return resp.getData();
  }

  /**
   * Get more details on a metric, including reporting sources and approximate last time reported
   *
   * @param m Metric name (required)
   * @param l limit (optional)
   * @param c cursor value to continue if the number of results exceeds 1000 (optional)
   * @param h glob pattern for sources to include in the query result (optional)
   * @return ApiResponse&lt;MetricDetailsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<MetricDetailsResponse> getMetricDetailsWithHttpInfo(String m, Integer l, String c, List<String> h) throws ApiException {
    com.squareup.okhttp.Call call = getMetricDetailsValidateBeforeCall(m, l, c, h, null, null);
    Type localVarReturnType = new TypeToken<MetricDetailsResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get more details on a metric, including reporting sources and approximate last time reported (asynchronously)
   *
   * @param m        Metric name (required)
   * @param l        limit (optional)
   * @param c        cursor value to continue if the number of results exceeds 1000 (optional)
   * @param h        glob pattern for sources to include in the query result (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getMetricDetailsAsync(String m, Integer l, String c, List<String> h, final ApiCallback<MetricDetailsResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getMetricDetailsValidateBeforeCall(m, l, c, h, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<MetricDetailsResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
