/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api;

import java.util.Map;
import java.util.List;

/**
 * Callback for asynchronous API call.
 *
 * @param <T> The return type
 */
public interface ApiCallback<T> {
  /**
   * This is called when the API call fails.
   *
   * @param e               The exception causing the failure
   * @param statusCode      Status code of the response if available, otherwise it would be 0
   * @param responseHeaders Headers of the response if available, otherwise it would be null
   */
  void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders);

  /**
   * This is called when the API call succeeded.
   *
   * @param result          The result deserialized from response
   * @param statusCode      Status code of the response
   * @param responseHeaders Headers of the response
   */
  void onSuccess(T result, int statusCode, Map<String, List<String>> responseHeaders);

  /**
   * This is called when the API upload processing.
   *
   * @param bytesWritten  bytes Written
   * @param contentLength content length of request body
   * @param done          write end
   */
  void onUploadProgress(long bytesWritten, long contentLength, boolean done);

  /**
   * This is called when the API downlond processing.
   *
   * @param bytesRead     bytes Read
   * @param contentLength content lenngth of the response
   * @param done          Read end
   */
  void onDownloadProgress(long bytesRead, long contentLength, boolean done);
}
