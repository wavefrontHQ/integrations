/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.ExternalLink;
import com.wavefront.rest.models.ResponseContainerExternalLink;
import com.wavefront.rest.models.ResponseContainerPagedExternalLink;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExternalLinkApi {
  private ApiClient apiClient;

  public ExternalLinkApi() {
    this(Configuration.getDefaultApiClient());
  }

  public ExternalLinkApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for createExternalLink
   *
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;External Link API Example\&quot;,   \&quot;template\&quot;: \&quot;https://example.com/{{source}}\&quot;,   \&quot;description\&quot;: \&quot;External Link Description\&quot; }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call createExternalLinkCall(ExternalLink body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/extlink";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call createExternalLinkValidateBeforeCall(ExternalLink body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = createExternalLinkCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Create a specific external link
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;External Link API Example\&quot;,   \&quot;template\&quot;: \&quot;https://example.com/{{source}}\&quot;,   \&quot;description\&quot;: \&quot;External Link Description\&quot; }&lt;/pre&gt; (optional)
   * @return ResponseContainerExternalLink
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerExternalLink createExternalLink(ExternalLink body) throws ApiException {
    ApiResponse<ResponseContainerExternalLink> resp = createExternalLinkWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Create a specific external link
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;External Link API Example\&quot;,   \&quot;template\&quot;: \&quot;https://example.com/{{source}}\&quot;,   \&quot;description\&quot;: \&quot;External Link Description\&quot; }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerExternalLink&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerExternalLink> createExternalLinkWithHttpInfo(ExternalLink body) throws ApiException {
    com.squareup.okhttp.Call call = createExternalLinkValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerExternalLink>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create a specific external link (asynchronously)
   *
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;External Link API Example\&quot;,   \&quot;template\&quot;: \&quot;https://example.com/{{source}}\&quot;,   \&quot;description\&quot;: \&quot;External Link Description\&quot; }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call createExternalLinkAsync(ExternalLink body, final ApiCallback<ResponseContainerExternalLink> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = createExternalLinkValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerExternalLink>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for deleteExternalLink
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call deleteExternalLinkCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/extlink/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call deleteExternalLinkValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling deleteExternalLink(Async)");
    }


    com.squareup.okhttp.Call call = deleteExternalLinkCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Delete a specific external link
   *
   * @param id (required)
   * @return ResponseContainerExternalLink
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerExternalLink deleteExternalLink(String id) throws ApiException {
    ApiResponse<ResponseContainerExternalLink> resp = deleteExternalLinkWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Delete a specific external link
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerExternalLink&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerExternalLink> deleteExternalLinkWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = deleteExternalLinkValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerExternalLink>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete a specific external link (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call deleteExternalLinkAsync(String id, final ApiCallback<ResponseContainerExternalLink> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = deleteExternalLinkValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerExternalLink>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllExternalLink
   *
   * @param offset                  (optional, default to 0)
   * @param limit                   (optional, default to 100)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllExternalLinkCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/extlink";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (offset != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    if (limit != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllExternalLinkValidateBeforeCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllExternalLinkCall(offset, limit, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get all external links for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ResponseContainerPagedExternalLink
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedExternalLink getAllExternalLink(Integer offset, Integer limit) throws ApiException {
    ApiResponse<ResponseContainerPagedExternalLink> resp = getAllExternalLinkWithHttpInfo(offset, limit);
    return resp.getData();
  }

  /**
   * Get all external links for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ApiResponse&lt;ResponseContainerPagedExternalLink&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedExternalLink> getAllExternalLinkWithHttpInfo(Integer offset, Integer limit) throws ApiException {
    com.squareup.okhttp.Call call = getAllExternalLinkValidateBeforeCall(offset, limit, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedExternalLink>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get all external links for a customer (asynchronously)
   *
   * @param offset   (optional, default to 0)
   * @param limit    (optional, default to 100)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllExternalLinkAsync(Integer offset, Integer limit, final ApiCallback<ResponseContainerPagedExternalLink> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllExternalLinkValidateBeforeCall(offset, limit, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedExternalLink>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getExternalLink
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getExternalLinkCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/extlink/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getExternalLinkValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getExternalLink(Async)");
    }


    com.squareup.okhttp.Call call = getExternalLinkCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get a specific external link
   *
   * @param id (required)
   * @return ResponseContainerExternalLink
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerExternalLink getExternalLink(String id) throws ApiException {
    ApiResponse<ResponseContainerExternalLink> resp = getExternalLinkWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Get a specific external link
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerExternalLink&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerExternalLink> getExternalLinkWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getExternalLinkValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerExternalLink>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get a specific external link (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getExternalLinkAsync(String id, final ApiCallback<ResponseContainerExternalLink> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getExternalLinkValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerExternalLink>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for updateExternalLink
   *
   * @param id                      (required)
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;External Link API Example\&quot;,   \&quot;template\&quot;: \&quot;https://example.com/{{source}}\&quot;,   \&quot;description\&quot;: \&quot;External Link Description\&quot; }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call updateExternalLinkCall(String id, ExternalLink body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/extlink/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call updateExternalLinkValidateBeforeCall(String id, ExternalLink body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling updateExternalLink(Async)");
    }


    com.squareup.okhttp.Call call = updateExternalLinkCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Update a specific external link
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;External Link API Example\&quot;,   \&quot;template\&quot;: \&quot;https://example.com/{{source}}\&quot;,   \&quot;description\&quot;: \&quot;External Link Description\&quot; }&lt;/pre&gt; (optional)
   * @return ResponseContainerExternalLink
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerExternalLink updateExternalLink(String id, ExternalLink body) throws ApiException {
    ApiResponse<ResponseContainerExternalLink> resp = updateExternalLinkWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Update a specific external link
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;External Link API Example\&quot;,   \&quot;template\&quot;: \&quot;https://example.com/{{source}}\&quot;,   \&quot;description\&quot;: \&quot;External Link Description\&quot; }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerExternalLink&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerExternalLink> updateExternalLinkWithHttpInfo(String id, ExternalLink body) throws ApiException {
    com.squareup.okhttp.Call call = updateExternalLinkValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerExternalLink>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update a specific external link (asynchronously)
   *
   * @param id       (required)
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;External Link API Example\&quot;,   \&quot;template\&quot;: \&quot;https://example.com/{{source}}\&quot;,   \&quot;description\&quot;: \&quot;External Link Description\&quot; }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call updateExternalLinkAsync(String id, ExternalLink body, final ApiCallback<ResponseContainerExternalLink> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = updateExternalLinkValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerExternalLink>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
