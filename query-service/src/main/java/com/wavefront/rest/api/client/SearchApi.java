/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.EventSearchRequest;
import com.wavefront.rest.models.FacetSearchRequestContainer;
import com.wavefront.rest.models.FacetsSearchRequestContainer;
import com.wavefront.rest.models.ResponseContainerFacetResponse;
import com.wavefront.rest.models.ResponseContainerFacetsResponseContainer;
import com.wavefront.rest.models.ResponseContainerPagedAlert;
import com.wavefront.rest.models.ResponseContainerPagedAlertWithStats;
import com.wavefront.rest.models.ResponseContainerPagedCloudIntegration;
import com.wavefront.rest.models.ResponseContainerPagedCustomerFacingUserObject;
import com.wavefront.rest.models.ResponseContainerPagedDashboard;
import com.wavefront.rest.models.ResponseContainerPagedDerivedMetricDefinition;
import com.wavefront.rest.models.ResponseContainerPagedDerivedMetricDefinitionWithStats;
import com.wavefront.rest.models.ResponseContainerPagedEvent;
import com.wavefront.rest.models.ResponseContainerPagedExternalLink;
import com.wavefront.rest.models.ResponseContainerPagedMaintenanceWindow;
import com.wavefront.rest.models.ResponseContainerPagedNotificant;
import com.wavefront.rest.models.ResponseContainerPagedProxy;
import com.wavefront.rest.models.ResponseContainerPagedSource;
import com.wavefront.rest.models.ResponseContainerPagedUserGroup;
import com.wavefront.rest.models.SortableSearchRequest;
import com.wavefront.rest.models.SourceSearchRequestContainer;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
  private ApiClient apiClient;

  public SearchApi() {
    this(Configuration.getDefaultApiClient());
  }

  public SearchApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for searchAlertDeletedEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchAlertDeletedEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/alert/deleted";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchAlertDeletedEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchAlertDeletedEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s deleted alerts
   *
   * @param body (optional)
   * @return ResponseContainerPagedAlert
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedAlert searchAlertDeletedEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedAlert> resp = searchAlertDeletedEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s deleted alerts
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedAlert&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedAlert> searchAlertDeletedEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchAlertDeletedEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedAlert>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s deleted alerts (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchAlertDeletedEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedAlert> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchAlertDeletedEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedAlert>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchAlertDeletedForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchAlertDeletedForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/alert/deleted/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchAlertDeletedForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchAlertDeletedForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchAlertDeletedForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted alerts
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchAlertDeletedForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchAlertDeletedForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted alerts
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchAlertDeletedForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchAlertDeletedForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted alerts (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchAlertDeletedForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchAlertDeletedForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchAlertDeletedForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchAlertDeletedForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/alert/deleted/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchAlertDeletedForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchAlertDeletedForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted alerts
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchAlertDeletedForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchAlertDeletedForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted alerts
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchAlertDeletedForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchAlertDeletedForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted alerts (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchAlertDeletedForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchAlertDeletedForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchAlertEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchAlertEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/alert";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchAlertEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchAlertEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s non-deleted alerts
   *
   * @param body (optional)
   * @return ResponseContainerPagedAlertWithStats
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedAlertWithStats searchAlertEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedAlertWithStats> resp = searchAlertEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s non-deleted alerts
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedAlertWithStats&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedAlertWithStats> searchAlertEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchAlertEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedAlertWithStats>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s non-deleted alerts (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchAlertEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedAlertWithStats> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchAlertEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedAlertWithStats>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchAlertForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchAlertForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/alert/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchAlertForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchAlertForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchAlertForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted alerts
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchAlertForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchAlertForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted alerts
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchAlertForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchAlertForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted alerts (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchAlertForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchAlertForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchAlertForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchAlertForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/alert/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchAlertForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchAlertForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted alerts
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchAlertForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchAlertForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted alerts
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchAlertForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchAlertForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted alerts (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchAlertForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchAlertForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchCloudIntegrationDeletedEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationDeletedEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/cloudintegration/deleted";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchCloudIntegrationDeletedEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s deleted cloud integrations
   *
   * @param body (optional)
   * @return ResponseContainerPagedCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedCloudIntegration searchCloudIntegrationDeletedEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedCloudIntegration> resp = searchCloudIntegrationDeletedEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s deleted cloud integrations
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedCloudIntegration> searchCloudIntegrationDeletedEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s deleted cloud integrations (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationDeletedEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchCloudIntegrationDeletedForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationDeletedForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/cloudintegration/deleted/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchCloudIntegrationDeletedForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchCloudIntegrationDeletedForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted cloud integrations
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchCloudIntegrationDeletedForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchCloudIntegrationDeletedForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted cloud integrations
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchCloudIntegrationDeletedForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted cloud integrations (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationDeletedForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchCloudIntegrationDeletedForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationDeletedForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/cloudintegration/deleted/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchCloudIntegrationDeletedForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted cloud integrations
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchCloudIntegrationDeletedForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchCloudIntegrationDeletedForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted cloud integrations
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchCloudIntegrationDeletedForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted cloud integrations (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationDeletedForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchCloudIntegrationDeletedForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchCloudIntegrationEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/cloudintegration";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchCloudIntegrationEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchCloudIntegrationEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s non-deleted cloud integrations
   *
   * @param body (optional)
   * @return ResponseContainerPagedCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedCloudIntegration searchCloudIntegrationEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedCloudIntegration> resp = searchCloudIntegrationEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s non-deleted cloud integrations
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedCloudIntegration> searchCloudIntegrationEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchCloudIntegrationEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s non-deleted cloud integrations (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchCloudIntegrationEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchCloudIntegrationForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/cloudintegration/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchCloudIntegrationForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchCloudIntegrationForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchCloudIntegrationForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted cloud integrations
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchCloudIntegrationForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchCloudIntegrationForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted cloud integrations
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchCloudIntegrationForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchCloudIntegrationForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted cloud integrations (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchCloudIntegrationForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchCloudIntegrationForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/cloudintegration/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchCloudIntegrationForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchCloudIntegrationForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted cloud integrations
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchCloudIntegrationForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchCloudIntegrationForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted cloud integrations
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchCloudIntegrationForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchCloudIntegrationForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted cloud integrations (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchCloudIntegrationForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchCloudIntegrationForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchDashboardDeletedEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchDashboardDeletedEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/dashboard/deleted";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchDashboardDeletedEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchDashboardDeletedEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s deleted dashboards
   *
   * @param body (optional)
   * @return ResponseContainerPagedDashboard
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedDashboard searchDashboardDeletedEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedDashboard> resp = searchDashboardDeletedEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s deleted dashboards
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedDashboard&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedDashboard> searchDashboardDeletedEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchDashboardDeletedEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedDashboard>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s deleted dashboards (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchDashboardDeletedEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedDashboard> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchDashboardDeletedEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedDashboard>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchDashboardDeletedForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchDashboardDeletedForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/dashboard/deleted/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchDashboardDeletedForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchDashboardDeletedForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchDashboardDeletedForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted dashboards
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchDashboardDeletedForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchDashboardDeletedForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted dashboards
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchDashboardDeletedForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchDashboardDeletedForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted dashboards (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchDashboardDeletedForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchDashboardDeletedForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchDashboardDeletedForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchDashboardDeletedForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/dashboard/deleted/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchDashboardDeletedForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchDashboardDeletedForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted dashboards
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchDashboardDeletedForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchDashboardDeletedForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted dashboards
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchDashboardDeletedForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchDashboardDeletedForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted dashboards (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchDashboardDeletedForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchDashboardDeletedForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchDashboardEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchDashboardEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/dashboard";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchDashboardEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchDashboardEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s non-deleted dashboards
   *
   * @param body (optional)
   * @return ResponseContainerPagedDashboard
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedDashboard searchDashboardEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedDashboard> resp = searchDashboardEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s non-deleted dashboards
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedDashboard&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedDashboard> searchDashboardEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchDashboardEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedDashboard>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s non-deleted dashboards (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchDashboardEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedDashboard> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchDashboardEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedDashboard>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchDashboardForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchDashboardForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/dashboard/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchDashboardForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchDashboardForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchDashboardForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted dashboards
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchDashboardForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchDashboardForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted dashboards
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchDashboardForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchDashboardForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted dashboards (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchDashboardForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchDashboardForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchDashboardForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchDashboardForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/dashboard/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchDashboardForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchDashboardForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted dashboards
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchDashboardForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchDashboardForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted dashboards
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchDashboardForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchDashboardForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted dashboards (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchDashboardForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchDashboardForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchExternalLinkEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchExternalLinkEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/extlink";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchExternalLinkEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchExternalLinkEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s external links
   *
   * @param body (optional)
   * @return ResponseContainerPagedExternalLink
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedExternalLink searchExternalLinkEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedExternalLink> resp = searchExternalLinkEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s external links
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedExternalLink&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedExternalLink> searchExternalLinkEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchExternalLinkEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedExternalLink>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s external links (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchExternalLinkEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedExternalLink> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchExternalLinkEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedExternalLink>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchExternalLinksForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchExternalLinksForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/extlink/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchExternalLinksForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchExternalLinksForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchExternalLinksForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s external links
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchExternalLinksForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchExternalLinksForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s external links
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchExternalLinksForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchExternalLinksForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s external links (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchExternalLinksForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchExternalLinksForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchExternalLinksForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchExternalLinksForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/extlink/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchExternalLinksForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchExternalLinksForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s external links
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchExternalLinksForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchExternalLinksForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s external links
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchExternalLinksForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchExternalLinksForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s external links (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchExternalLinksForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchExternalLinksForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchMaintenanceWindowEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchMaintenanceWindowEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/maintenancewindow";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchMaintenanceWindowEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchMaintenanceWindowEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s maintenance windows
   *
   * @param body (optional)
   * @return ResponseContainerPagedMaintenanceWindow
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedMaintenanceWindow searchMaintenanceWindowEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedMaintenanceWindow> resp = searchMaintenanceWindowEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s maintenance windows
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedMaintenanceWindow&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedMaintenanceWindow> searchMaintenanceWindowEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchMaintenanceWindowEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedMaintenanceWindow>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s maintenance windows (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchMaintenanceWindowEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedMaintenanceWindow> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchMaintenanceWindowEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedMaintenanceWindow>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchMaintenanceWindowForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchMaintenanceWindowForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/maintenancewindow/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchMaintenanceWindowForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchMaintenanceWindowForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchMaintenanceWindowForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s maintenance windows
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchMaintenanceWindowForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchMaintenanceWindowForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s maintenance windows
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchMaintenanceWindowForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchMaintenanceWindowForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s maintenance windows (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchMaintenanceWindowForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchMaintenanceWindowForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchMaintenanceWindowForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchMaintenanceWindowForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/maintenancewindow/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchMaintenanceWindowForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchMaintenanceWindowForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s maintenance windows
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchMaintenanceWindowForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchMaintenanceWindowForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s maintenance windows
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchMaintenanceWindowForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchMaintenanceWindowForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s maintenance windows (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchMaintenanceWindowForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchMaintenanceWindowForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchNotficantForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchNotficantForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/notificant/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchNotficantForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchNotficantForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s notificants
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchNotficantForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchNotficantForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s notificants
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchNotficantForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchNotficantForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s notificants (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchNotficantForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchNotficantForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchNotificantEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchNotificantEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/notificant";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchNotificantEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchNotificantEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s notificants
   *
   * @param body (optional)
   * @return ResponseContainerPagedNotificant
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedNotificant searchNotificantEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedNotificant> resp = searchNotificantEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s notificants
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedNotificant&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedNotificant> searchNotificantEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchNotificantEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedNotificant>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s notificants (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchNotificantEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedNotificant> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchNotificantEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedNotificant>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchNotificantForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchNotificantForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/notificant/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchNotificantForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchNotificantForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchNotificantForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s notificants
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchNotificantForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchNotificantForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s notificants
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchNotificantForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchNotificantForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s notificants (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchNotificantForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchNotificantForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchProxyDeletedEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchProxyDeletedEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/proxy/deleted";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchProxyDeletedEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchProxyDeletedEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s deleted proxies
   *
   * @param body (optional)
   * @return ResponseContainerPagedProxy
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedProxy searchProxyDeletedEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedProxy> resp = searchProxyDeletedEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s deleted proxies
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedProxy&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedProxy> searchProxyDeletedEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchProxyDeletedEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedProxy>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s deleted proxies (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchProxyDeletedEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedProxy> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchProxyDeletedEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedProxy>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchProxyDeletedForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchProxyDeletedForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/proxy/deleted/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchProxyDeletedForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchProxyDeletedForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchProxyDeletedForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted proxies
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchProxyDeletedForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchProxyDeletedForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted proxies
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchProxyDeletedForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchProxyDeletedForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted proxies (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchProxyDeletedForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchProxyDeletedForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchProxyDeletedForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchProxyDeletedForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/proxy/deleted/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchProxyDeletedForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchProxyDeletedForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted proxies
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchProxyDeletedForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchProxyDeletedForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted proxies
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchProxyDeletedForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchProxyDeletedForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted proxies (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchProxyDeletedForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchProxyDeletedForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchProxyEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchProxyEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/proxy";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchProxyEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchProxyEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s non-deleted proxies
   *
   * @param body (optional)
   * @return ResponseContainerPagedProxy
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedProxy searchProxyEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedProxy> resp = searchProxyEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s non-deleted proxies
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedProxy&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedProxy> searchProxyEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchProxyEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedProxy>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s non-deleted proxies (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchProxyEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedProxy> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchProxyEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedProxy>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchProxyForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchProxyForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/proxy/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchProxyForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchProxyForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchProxyForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted proxies
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchProxyForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchProxyForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted proxies
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchProxyForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchProxyForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted proxies (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchProxyForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchProxyForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchProxyForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchProxyForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/proxy/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchProxyForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchProxyForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted proxies
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchProxyForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchProxyForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted proxies
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchProxyForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchProxyForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted proxies (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchProxyForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchProxyForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchRegisteredQueryDeletedEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryDeletedEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/derivedmetric/deleted";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchRegisteredQueryDeletedEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s deleted derived metric definitions
   *
   * @param body (optional)
   * @return ResponseContainerPagedDerivedMetricDefinition
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedDerivedMetricDefinition searchRegisteredQueryDeletedEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedDerivedMetricDefinition> resp = searchRegisteredQueryDeletedEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s deleted derived metric definitions
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedDerivedMetricDefinition&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedDerivedMetricDefinition> searchRegisteredQueryDeletedEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedDerivedMetricDefinition>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s deleted derived metric definitions (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryDeletedEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedDerivedMetricDefinition> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedDerivedMetricDefinition>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchRegisteredQueryDeletedForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryDeletedForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/derivedmetric/deleted/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchRegisteredQueryDeletedForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchRegisteredQueryDeletedForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted derived metric definitions
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchRegisteredQueryDeletedForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchRegisteredQueryDeletedForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted derived metric definitions
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchRegisteredQueryDeletedForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s deleted derived metric definitions (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryDeletedForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchRegisteredQueryDeletedForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryDeletedForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/derivedmetric/deleted/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchRegisteredQueryDeletedForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted derived metric definitions
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchRegisteredQueryDeletedForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchRegisteredQueryDeletedForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted derived metric definitions
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchRegisteredQueryDeletedForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s deleted derived metric definitions (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryDeletedForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchRegisteredQueryDeletedForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchRegisteredQueryEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/derivedmetric";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchRegisteredQueryEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchRegisteredQueryEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s non-deleted derived metric definitions
   *
   * @param body (optional)
   * @return ResponseContainerPagedDerivedMetricDefinitionWithStats
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedDerivedMetricDefinitionWithStats searchRegisteredQueryEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedDerivedMetricDefinitionWithStats> resp = searchRegisteredQueryEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s non-deleted derived metric definitions
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedDerivedMetricDefinitionWithStats&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedDerivedMetricDefinitionWithStats> searchRegisteredQueryEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchRegisteredQueryEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedDerivedMetricDefinitionWithStats>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s non-deleted derived metric definitions (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedDerivedMetricDefinitionWithStats> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchRegisteredQueryEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedDerivedMetricDefinitionWithStats>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchRegisteredQueryForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/derivedmetric/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchRegisteredQueryForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchRegisteredQueryForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchRegisteredQueryForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted derived metric definitions
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchRegisteredQueryForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchRegisteredQueryForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted derived metric definitions
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchRegisteredQueryForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchRegisteredQueryForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s non-deleted derived metric definitions (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchRegisteredQueryForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchRegisteredQueryForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/derivedmetric/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchRegisteredQueryForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchRegisteredQueryForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted derived metric definition
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchRegisteredQueryForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchRegisteredQueryForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted derived metric definition
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchRegisteredQueryForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchRegisteredQueryForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s non-deleted derived metric definition (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchRegisteredQueryForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchRegisteredQueryForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchReportEventEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchReportEventEntitiesCall(EventSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/event";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchReportEventEntitiesValidateBeforeCall(EventSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchReportEventEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s events
   *
   * @param body (optional)
   * @return ResponseContainerPagedEvent
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedEvent searchReportEventEntities(EventSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedEvent> resp = searchReportEventEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s events
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedEvent&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedEvent> searchReportEventEntitiesWithHttpInfo(EventSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchReportEventEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedEvent>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s events (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchReportEventEntitiesAsync(EventSearchRequest body, final ApiCallback<ResponseContainerPagedEvent> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchReportEventEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedEvent>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchReportEventForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchReportEventForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/event/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchReportEventForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchReportEventForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchReportEventForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s events
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchReportEventForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchReportEventForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s events
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchReportEventForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchReportEventForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s events (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchReportEventForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchReportEventForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchReportEventForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchReportEventForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/event/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchReportEventForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchReportEventForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s events
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchReportEventForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchReportEventForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s events
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchReportEventForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchReportEventForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s events (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchReportEventForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchReportEventForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchTaggedSourceEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchTaggedSourceEntitiesCall(SourceSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/source";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchTaggedSourceEntitiesValidateBeforeCall(SourceSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchTaggedSourceEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s sources
   *
   * @param body (optional)
   * @return ResponseContainerPagedSource
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedSource searchTaggedSourceEntities(SourceSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerPagedSource> resp = searchTaggedSourceEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s sources
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedSource&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedSource> searchTaggedSourceEntitiesWithHttpInfo(SourceSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchTaggedSourceEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedSource>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s sources (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchTaggedSourceEntitiesAsync(SourceSearchRequestContainer body, final ApiCallback<ResponseContainerPagedSource> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchTaggedSourceEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedSource>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchTaggedSourceForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchTaggedSourceForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/source/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchTaggedSourceForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchTaggedSourceForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchTaggedSourceForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s sources
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchTaggedSourceForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchTaggedSourceForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s sources
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchTaggedSourceForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchTaggedSourceForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s sources (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchTaggedSourceForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchTaggedSourceForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchTaggedSourceForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchTaggedSourceForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/source/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchTaggedSourceForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchTaggedSourceForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s sources
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchTaggedSourceForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchTaggedSourceForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s sources
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchTaggedSourceForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchTaggedSourceForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s sources (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchTaggedSourceForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchTaggedSourceForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchUserEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchUserEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/user";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchUserEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchUserEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s users
   *
   * @param body (optional)
   * @return ResponseContainerPagedCustomerFacingUserObject
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedCustomerFacingUserObject searchUserEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedCustomerFacingUserObject> resp = searchUserEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s users
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedCustomerFacingUserObject&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedCustomerFacingUserObject> searchUserEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchUserEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedCustomerFacingUserObject>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s users (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchUserEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedCustomerFacingUserObject> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchUserEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedCustomerFacingUserObject>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchUserForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchUserForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/user/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchUserForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchUserForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchUserForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s users
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchUserForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchUserForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s users
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchUserForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchUserForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s users (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchUserForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchUserForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchUserForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchUserForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/user/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchUserForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchUserForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s users
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchUserForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchUserForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s users
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchUserForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchUserForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s users (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchUserForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchUserForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchUserGroupEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchUserGroupEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/usergroup";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchUserGroupEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchUserGroupEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s user groups
   *
   * @param body (optional)
   * @return ResponseContainerPagedUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedUserGroup searchUserGroupEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedUserGroup> resp = searchUserGroupEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s user groups
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedUserGroup> searchUserGroupEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchUserGroupEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s user groups (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchUserGroupEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchUserGroupEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchUserGroupForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchUserGroupForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/usergroup/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchUserGroupForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchUserGroupForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchUserGroupForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s user groups
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchUserGroupForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchUserGroupForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s user groups
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchUserGroupForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchUserGroupForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s user groups (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchUserGroupForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchUserGroupForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchUserGroupForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchUserGroupForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/usergroup/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchUserGroupForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchUserGroupForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s user groups
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchUserGroupForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchUserGroupForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s user groups
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchUserGroupForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchUserGroupForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s user groups (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchUserGroupForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchUserGroupForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchWebHookEntities
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchWebHookEntitiesCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/webhook";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchWebHookEntitiesValidateBeforeCall(SortableSearchRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchWebHookEntitiesCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Search over a customer&#39;s webhooks
   *
   * @param body (optional)
   * @return ResponseContainerPagedNotificant
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedNotificant searchWebHookEntities(SortableSearchRequest body) throws ApiException {
    ApiResponse<ResponseContainerPagedNotificant> resp = searchWebHookEntitiesWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Search over a customer&#39;s webhooks
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerPagedNotificant&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedNotificant> searchWebHookEntitiesWithHttpInfo(SortableSearchRequest body) throws ApiException {
    com.squareup.okhttp.Call call = searchWebHookEntitiesValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedNotificant>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Search over a customer&#39;s webhooks (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchWebHookEntitiesAsync(SortableSearchRequest body, final ApiCallback<ResponseContainerPagedNotificant> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchWebHookEntitiesValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedNotificant>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchWebHookForFacet
   *
   * @param facet                   (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchWebHookForFacetCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/webhook/{facet}"
        .replaceAll("\\{" + "facet" + "\\}", apiClient.escapeString(facet.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchWebHookForFacetValidateBeforeCall(String facet, FacetSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'facet' is set
    if (facet == null) {
      throw new ApiException("Missing the required parameter 'facet' when calling searchWebHookForFacet(Async)");
    }


    com.squareup.okhttp.Call call = searchWebHookForFacetCall(facet, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of a specific facet over the customer&#39;s webhooks
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ResponseContainerFacetResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetResponse searchWebHookForFacet(String facet, FacetSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetResponse> resp = searchWebHookForFacetWithHttpInfo(facet, body);
    return resp.getData();
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s webhooks
   *
   * @param facet (required)
   * @param body  (optional)
   * @return ApiResponse&lt;ResponseContainerFacetResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetResponse> searchWebHookForFacetWithHttpInfo(String facet, FacetSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchWebHookForFacetValidateBeforeCall(facet, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of a specific facet over the customer&#39;s webhooks (asynchronously)
   *
   * @param facet    (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchWebHookForFacetAsync(String facet, FacetSearchRequestContainer body, final ApiCallback<ResponseContainerFacetResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchWebHookForFacetValidateBeforeCall(facet, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for searchWebhookForFacets
   *
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call searchWebhookForFacetsCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/search/webhook/facets";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call searchWebhookForFacetsValidateBeforeCall(FacetsSearchRequestContainer body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = searchWebhookForFacetsCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Lists the values of one or more facets over the customer&#39;s webhooks
   *
   * @param body (optional)
   * @return ResponseContainerFacetsResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerFacetsResponseContainer searchWebhookForFacets(FacetsSearchRequestContainer body) throws ApiException {
    ApiResponse<ResponseContainerFacetsResponseContainer> resp = searchWebhookForFacetsWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s webhooks
   *
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerFacetsResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerFacetsResponseContainer> searchWebhookForFacetsWithHttpInfo(FacetsSearchRequestContainer body) throws ApiException {
    com.squareup.okhttp.Call call = searchWebhookForFacetsValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Lists the values of one or more facets over the customer&#39;s webhooks (asynchronously)
   *
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call searchWebhookForFacetsAsync(FacetsSearchRequestContainer body, final ApiCallback<ResponseContainerFacetsResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = searchWebhookForFacetsValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerFacetsResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
