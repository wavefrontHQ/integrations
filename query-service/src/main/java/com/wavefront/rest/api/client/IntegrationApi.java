/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.InstallAlerts;
import com.wavefront.rest.models.ResponseContainerIntegration;
import com.wavefront.rest.models.ResponseContainerIntegrationStatus;
import com.wavefront.rest.models.ResponseContainerListIntegration;
import com.wavefront.rest.models.ResponseContainerListIntegrationManifestGroup;
import com.wavefront.rest.models.ResponseContainerMapStringIntegrationStatus;
import com.wavefront.rest.models.ResponseContainerPagedIntegration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationApi {
  private ApiClient apiClient;

  public IntegrationApi() {
    this(Configuration.getDefaultApiClient());
  }

  public IntegrationApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for getAllIntegration
   *
   * @param offset                  (optional, default to 0)
   * @param limit                   (optional, default to 100)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllIntegrationCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (offset != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    if (limit != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllIntegrationValidateBeforeCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllIntegrationCall(offset, limit, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Gets a flat list of all Wavefront integrations available, along with their status
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ResponseContainerPagedIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedIntegration getAllIntegration(Integer offset, Integer limit) throws ApiException {
    ApiResponse<ResponseContainerPagedIntegration> resp = getAllIntegrationWithHttpInfo(offset, limit);
    return resp.getData();
  }

  /**
   * Gets a flat list of all Wavefront integrations available, along with their status
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ApiResponse&lt;ResponseContainerPagedIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedIntegration> getAllIntegrationWithHttpInfo(Integer offset, Integer limit) throws ApiException {
    com.squareup.okhttp.Call call = getAllIntegrationValidateBeforeCall(offset, limit, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Gets a flat list of all Wavefront integrations available, along with their status (asynchronously)
   *
   * @param offset   (optional, default to 0)
   * @param limit    (optional, default to 100)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllIntegrationAsync(Integer offset, Integer limit, final ApiCallback<ResponseContainerPagedIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllIntegrationValidateBeforeCall(offset, limit, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllIntegrationInManifests
   *
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllIntegrationInManifestsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/manifests";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllIntegrationInManifestsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllIntegrationInManifestsCall(progressListener, progressRequestListener);
    return call;

  }

  /**
   * Gets all Wavefront integrations as structured in their integration manifests, along with their status and content
   *
   * @return ResponseContainerListIntegrationManifestGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerListIntegrationManifestGroup getAllIntegrationInManifests() throws ApiException {
    ApiResponse<ResponseContainerListIntegrationManifestGroup> resp = getAllIntegrationInManifestsWithHttpInfo();
    return resp.getData();
  }

  /**
   * Gets all Wavefront integrations as structured in their integration manifests, along with their status and content
   *
   * @return ApiResponse&lt;ResponseContainerListIntegrationManifestGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerListIntegrationManifestGroup> getAllIntegrationInManifestsWithHttpInfo() throws ApiException {
    com.squareup.okhttp.Call call = getAllIntegrationInManifestsValidateBeforeCall(null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerListIntegrationManifestGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Gets all Wavefront integrations as structured in their integration manifests, along with their status and content (asynchronously)
   *
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllIntegrationInManifestsAsync(final ApiCallback<ResponseContainerListIntegrationManifestGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllIntegrationInManifestsValidateBeforeCall(progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerListIntegrationManifestGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllIntegrationInManifestsMin
   *
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllIntegrationInManifestsMinCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/manifests/min";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllIntegrationInManifestsMinValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllIntegrationInManifestsMinCall(progressListener, progressRequestListener);
    return call;

  }

  /**
   * Gets all Wavefront integrations as structured in their integration manifests.
   *
   * @return ResponseContainerListIntegrationManifestGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerListIntegrationManifestGroup getAllIntegrationInManifestsMin() throws ApiException {
    ApiResponse<ResponseContainerListIntegrationManifestGroup> resp = getAllIntegrationInManifestsMinWithHttpInfo();
    return resp.getData();
  }

  /**
   * Gets all Wavefront integrations as structured in their integration manifests.
   *
   * @return ApiResponse&lt;ResponseContainerListIntegrationManifestGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerListIntegrationManifestGroup> getAllIntegrationInManifestsMinWithHttpInfo() throws ApiException {
    com.squareup.okhttp.Call call = getAllIntegrationInManifestsMinValidateBeforeCall(null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerListIntegrationManifestGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Gets all Wavefront integrations as structured in their integration manifests. (asynchronously)
   *
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllIntegrationInManifestsMinAsync(final ApiCallback<ResponseContainerListIntegrationManifestGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllIntegrationInManifestsMinValidateBeforeCall(progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerListIntegrationManifestGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllIntegrationStatuses
   *
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllIntegrationStatusesCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/status";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllIntegrationStatusesValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllIntegrationStatusesCall(progressListener, progressRequestListener);
    return call;

  }

  /**
   * Gets the status of all Wavefront integrations
   *
   * @return ResponseContainerMapStringIntegrationStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerMapStringIntegrationStatus getAllIntegrationStatuses() throws ApiException {
    ApiResponse<ResponseContainerMapStringIntegrationStatus> resp = getAllIntegrationStatusesWithHttpInfo();
    return resp.getData();
  }

  /**
   * Gets the status of all Wavefront integrations
   *
   * @return ApiResponse&lt;ResponseContainerMapStringIntegrationStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerMapStringIntegrationStatus> getAllIntegrationStatusesWithHttpInfo() throws ApiException {
    com.squareup.okhttp.Call call = getAllIntegrationStatusesValidateBeforeCall(null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerMapStringIntegrationStatus>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Gets the status of all Wavefront integrations (asynchronously)
   *
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllIntegrationStatusesAsync(final ApiCallback<ResponseContainerMapStringIntegrationStatus> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllIntegrationStatusesValidateBeforeCall(progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerMapStringIntegrationStatus>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getInstalledIntegration
   *
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getInstalledIntegrationCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/installed";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getInstalledIntegrationValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getInstalledIntegrationCall(progressListener, progressRequestListener);
    return call;

  }

  /**
   * Gets a flat list of all Integrations that are installed, along with their status
   *
   * @return ResponseContainerListIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerListIntegration getInstalledIntegration() throws ApiException {
    ApiResponse<ResponseContainerListIntegration> resp = getInstalledIntegrationWithHttpInfo();
    return resp.getData();
  }

  /**
   * Gets a flat list of all Integrations that are installed, along with their status
   *
   * @return ApiResponse&lt;ResponseContainerListIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerListIntegration> getInstalledIntegrationWithHttpInfo() throws ApiException {
    com.squareup.okhttp.Call call = getInstalledIntegrationValidateBeforeCall(null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerListIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Gets a flat list of all Integrations that are installed, along with their status (asynchronously)
   *
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getInstalledIntegrationAsync(final ApiCallback<ResponseContainerListIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getInstalledIntegrationValidateBeforeCall(progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerListIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getIntegration
   *
   * @param id                      (required)
   * @param refresh                 (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getIntegrationCall(String id, Boolean refresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (refresh != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("refresh", refresh));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getIntegrationValidateBeforeCall(String id, Boolean refresh, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getIntegration(Async)");
    }


    com.squareup.okhttp.Call call = getIntegrationCall(id, refresh, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Gets a single Wavefront integration by its id, along with its status
   *
   * @param id      (required)
   * @param refresh (optional)
   * @return ResponseContainerIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerIntegration getIntegration(String id, Boolean refresh) throws ApiException {
    ApiResponse<ResponseContainerIntegration> resp = getIntegrationWithHttpInfo(id, refresh);
    return resp.getData();
  }

  /**
   * Gets a single Wavefront integration by its id, along with its status
   *
   * @param id      (required)
   * @param refresh (optional)
   * @return ApiResponse&lt;ResponseContainerIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerIntegration> getIntegrationWithHttpInfo(String id, Boolean refresh) throws ApiException {
    com.squareup.okhttp.Call call = getIntegrationValidateBeforeCall(id, refresh, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Gets a single Wavefront integration by its id, along with its status (asynchronously)
   *
   * @param id       (required)
   * @param refresh  (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getIntegrationAsync(String id, Boolean refresh, final ApiCallback<ResponseContainerIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getIntegrationValidateBeforeCall(id, refresh, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getIntegrationStatus
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getIntegrationStatusCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/{id}/status"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getIntegrationStatusValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getIntegrationStatus(Async)");
    }


    com.squareup.okhttp.Call call = getIntegrationStatusCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Gets the status of a single Wavefront integration
   *
   * @param id (required)
   * @return ResponseContainerIntegrationStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerIntegrationStatus getIntegrationStatus(String id) throws ApiException {
    ApiResponse<ResponseContainerIntegrationStatus> resp = getIntegrationStatusWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Gets the status of a single Wavefront integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerIntegrationStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerIntegrationStatus> getIntegrationStatusWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getIntegrationStatusValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Gets the status of a single Wavefront integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getIntegrationStatusAsync(String id, final ApiCallback<ResponseContainerIntegrationStatus> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getIntegrationStatusValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for installAllIntegrationAlerts
   *
   * @param id                      (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call installAllIntegrationAlertsCall(String id, InstallAlerts body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/integration/{id}/install-all-alerts"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call installAllIntegrationAlertsValidateBeforeCall(String id, InstallAlerts body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling installAllIntegrationAlerts(Async)");
    }


    com.squareup.okhttp.Call call = installAllIntegrationAlertsCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Enable all alerts associated with this integration
   *
   * @param id   (required)
   * @param body (optional)
   * @return ResponseContainerIntegrationStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerIntegrationStatus installAllIntegrationAlerts(String id, InstallAlerts body) throws ApiException {
    ApiResponse<ResponseContainerIntegrationStatus> resp = installAllIntegrationAlertsWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Enable all alerts associated with this integration
   *
   * @param id   (required)
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainerIntegrationStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerIntegrationStatus> installAllIntegrationAlertsWithHttpInfo(String id, InstallAlerts body) throws ApiException {
    com.squareup.okhttp.Call call = installAllIntegrationAlertsValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Enable all alerts associated with this integration (asynchronously)
   *
   * @param id       (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call installAllIntegrationAlertsAsync(String id, InstallAlerts body, final ApiCallback<ResponseContainerIntegrationStatus> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = installAllIntegrationAlertsValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for installIntegration
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call installIntegrationCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/{id}/install"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call installIntegrationValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling installIntegration(Async)");
    }


    com.squareup.okhttp.Call call = installIntegrationCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Installs a Wavefront integration
   *
   * @param id (required)
   * @return ResponseContainerIntegrationStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerIntegrationStatus installIntegration(String id) throws ApiException {
    ApiResponse<ResponseContainerIntegrationStatus> resp = installIntegrationWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Installs a Wavefront integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerIntegrationStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerIntegrationStatus> installIntegrationWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = installIntegrationValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Installs a Wavefront integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call installIntegrationAsync(String id, final ApiCallback<ResponseContainerIntegrationStatus> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = installIntegrationValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for uninstallAllIntegrationAlerts
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call uninstallAllIntegrationAlertsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/{id}/uninstall-all-alerts"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call uninstallAllIntegrationAlertsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling uninstallAllIntegrationAlerts(Async)");
    }


    com.squareup.okhttp.Call call = uninstallAllIntegrationAlertsCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Disable all alerts associated with this integration
   *
   * @param id (required)
   * @return ResponseContainerIntegrationStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerIntegrationStatus uninstallAllIntegrationAlerts(String id) throws ApiException {
    ApiResponse<ResponseContainerIntegrationStatus> resp = uninstallAllIntegrationAlertsWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Disable all alerts associated with this integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerIntegrationStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerIntegrationStatus> uninstallAllIntegrationAlertsWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = uninstallAllIntegrationAlertsValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Disable all alerts associated with this integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call uninstallAllIntegrationAlertsAsync(String id, final ApiCallback<ResponseContainerIntegrationStatus> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = uninstallAllIntegrationAlertsValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for uninstallIntegration
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call uninstallIntegrationCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/integration/{id}/uninstall"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call uninstallIntegrationValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling uninstallIntegration(Async)");
    }


    com.squareup.okhttp.Call call = uninstallIntegrationCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Uninstalls a Wavefront integration
   *
   * @param id (required)
   * @return ResponseContainerIntegrationStatus
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerIntegrationStatus uninstallIntegration(String id) throws ApiException {
    ApiResponse<ResponseContainerIntegrationStatus> resp = uninstallIntegrationWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Uninstalls a Wavefront integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerIntegrationStatus&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerIntegrationStatus> uninstallIntegrationWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = uninstallIntegrationValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Uninstalls a Wavefront integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call uninstallIntegrationAsync(String id, final ApiCallback<ResponseContainerIntegrationStatus> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = uninstallIntegrationValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerIntegrationStatus>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
