/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.ResponseContainerPagedUserGroup;
import com.wavefront.rest.models.ResponseContainerUserGroup;
import com.wavefront.rest.models.UserGroupWrite;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserGroupApi {
  private ApiClient apiClient;

  public UserGroupApi() {
    this(Configuration.getDefaultApiClient());
  }

  public UserGroupApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for addUsersToUserGroup
   *
   * @param id                      (required)
   * @param body                    List of users that should be added to user group (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call addUsersToUserGroupCall(String id, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup/{id}/addUsers"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call addUsersToUserGroupValidateBeforeCall(String id, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling addUsersToUserGroup(Async)");
    }


    com.squareup.okhttp.Call call = addUsersToUserGroupCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Add multiple users to a specific user group
   *
   * @param id   (required)
   * @param body List of users that should be added to user group (optional)
   * @return ResponseContainerUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerUserGroup addUsersToUserGroup(String id, List<String> body) throws ApiException {
    ApiResponse<ResponseContainerUserGroup> resp = addUsersToUserGroupWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Add multiple users to a specific user group
   *
   * @param id   (required)
   * @param body List of users that should be added to user group (optional)
   * @return ApiResponse&lt;ResponseContainerUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerUserGroup> addUsersToUserGroupWithHttpInfo(String id, List<String> body) throws ApiException {
    com.squareup.okhttp.Call call = addUsersToUserGroupValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Add multiple users to a specific user group (asynchronously)
   *
   * @param id       (required)
   * @param body     List of users that should be added to user group (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call addUsersToUserGroupAsync(String id, List<String> body, final ApiCallback<ResponseContainerUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = addUsersToUserGroupValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for createUserGroup
   *
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;UserGroup name\&quot;,   \&quot;permissions\&quot;: [   \&quot;permission1\&quot;,   \&quot;permission2\&quot;,   \&quot;permission3\&quot;   ] }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call createUserGroupCall(UserGroupWrite body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call createUserGroupValidateBeforeCall(UserGroupWrite body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = createUserGroupCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Create a specific user group
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;UserGroup name\&quot;,   \&quot;permissions\&quot;: [   \&quot;permission1\&quot;,   \&quot;permission2\&quot;,   \&quot;permission3\&quot;   ] }&lt;/pre&gt; (optional)
   * @return ResponseContainerUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerUserGroup createUserGroup(UserGroupWrite body) throws ApiException {
    ApiResponse<ResponseContainerUserGroup> resp = createUserGroupWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Create a specific user group
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;UserGroup name\&quot;,   \&quot;permissions\&quot;: [   \&quot;permission1\&quot;,   \&quot;permission2\&quot;,   \&quot;permission3\&quot;   ] }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerUserGroup> createUserGroupWithHttpInfo(UserGroupWrite body) throws ApiException {
    com.squareup.okhttp.Call call = createUserGroupValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create a specific user group (asynchronously)
   *
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;UserGroup name\&quot;,   \&quot;permissions\&quot;: [   \&quot;permission1\&quot;,   \&quot;permission2\&quot;,   \&quot;permission3\&quot;   ] }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call createUserGroupAsync(UserGroupWrite body, final ApiCallback<ResponseContainerUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = createUserGroupValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for deleteUserGroup
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call deleteUserGroupCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call deleteUserGroupValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling deleteUserGroup(Async)");
    }


    com.squareup.okhttp.Call call = deleteUserGroupCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Delete a specific user group
   *
   * @param id (required)
   * @return ResponseContainerUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerUserGroup deleteUserGroup(String id) throws ApiException {
    ApiResponse<ResponseContainerUserGroup> resp = deleteUserGroupWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Delete a specific user group
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerUserGroup> deleteUserGroupWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = deleteUserGroupValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete a specific user group (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call deleteUserGroupAsync(String id, final ApiCallback<ResponseContainerUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = deleteUserGroupValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllUserGroups
   *
   * @param offset                  (optional, default to 0)
   * @param limit                   (optional, default to 100)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllUserGroupsCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (offset != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    if (limit != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllUserGroupsValidateBeforeCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllUserGroupsCall(offset, limit, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get all user groups for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ResponseContainerPagedUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedUserGroup getAllUserGroups(Integer offset, Integer limit) throws ApiException {
    ApiResponse<ResponseContainerPagedUserGroup> resp = getAllUserGroupsWithHttpInfo(offset, limit);
    return resp.getData();
  }

  /**
   * Get all user groups for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ApiResponse&lt;ResponseContainerPagedUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedUserGroup> getAllUserGroupsWithHttpInfo(Integer offset, Integer limit) throws ApiException {
    com.squareup.okhttp.Call call = getAllUserGroupsValidateBeforeCall(offset, limit, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get all user groups for a customer (asynchronously)
   *
   * @param offset   (optional, default to 0)
   * @param limit    (optional, default to 100)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllUserGroupsAsync(Integer offset, Integer limit, final ApiCallback<ResponseContainerPagedUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllUserGroupsValidateBeforeCall(offset, limit, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getUserGroup
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getUserGroupCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getUserGroupValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getUserGroup(Async)");
    }


    com.squareup.okhttp.Call call = getUserGroupCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get a specific user group
   *
   * @param id (required)
   * @return ResponseContainerUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerUserGroup getUserGroup(String id) throws ApiException {
    ApiResponse<ResponseContainerUserGroup> resp = getUserGroupWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Get a specific user group
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerUserGroup> getUserGroupWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getUserGroupValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get a specific user group (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getUserGroupAsync(String id, final ApiCallback<ResponseContainerUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getUserGroupValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for grantPermissionToUserGroups
   *
   * @param permission              Permission to grant to user group(s). (required)
   * @param body                    List of user groups. (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call grantPermissionToUserGroupsCall(String permission, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup/grant/{permission}"
        .replaceAll("\\{" + "permission" + "\\}", apiClient.escapeString(permission.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call grantPermissionToUserGroupsValidateBeforeCall(String permission, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'permission' is set
    if (permission == null) {
      throw new ApiException("Missing the required parameter 'permission' when calling grantPermissionToUserGroups(Async)");
    }


    com.squareup.okhttp.Call call = grantPermissionToUserGroupsCall(permission, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Grants a single permission to user group(s)
   *
   * @param permission Permission to grant to user group(s). (required)
   * @param body       List of user groups. (optional)
   * @return ResponseContainerUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerUserGroup grantPermissionToUserGroups(String permission, List<String> body) throws ApiException {
    ApiResponse<ResponseContainerUserGroup> resp = grantPermissionToUserGroupsWithHttpInfo(permission, body);
    return resp.getData();
  }

  /**
   * Grants a single permission to user group(s)
   *
   * @param permission Permission to grant to user group(s). (required)
   * @param body       List of user groups. (optional)
   * @return ApiResponse&lt;ResponseContainerUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerUserGroup> grantPermissionToUserGroupsWithHttpInfo(String permission, List<String> body) throws ApiException {
    com.squareup.okhttp.Call call = grantPermissionToUserGroupsValidateBeforeCall(permission, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Grants a single permission to user group(s) (asynchronously)
   *
   * @param permission Permission to grant to user group(s). (required)
   * @param body       List of user groups. (optional)
   * @param callback   The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call grantPermissionToUserGroupsAsync(String permission, List<String> body, final ApiCallback<ResponseContainerUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = grantPermissionToUserGroupsValidateBeforeCall(permission, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for removeUsersFromUserGroup
   *
   * @param id                      (required)
   * @param body                    List of users that should be removed from user group (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call removeUsersFromUserGroupCall(String id, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup/{id}/removeUsers"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call removeUsersFromUserGroupValidateBeforeCall(String id, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling removeUsersFromUserGroup(Async)");
    }


    com.squareup.okhttp.Call call = removeUsersFromUserGroupCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Remove multiple users from a specific user group
   *
   * @param id   (required)
   * @param body List of users that should be removed from user group (optional)
   * @return ResponseContainerUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerUserGroup removeUsersFromUserGroup(String id, List<String> body) throws ApiException {
    ApiResponse<ResponseContainerUserGroup> resp = removeUsersFromUserGroupWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Remove multiple users from a specific user group
   *
   * @param id   (required)
   * @param body List of users that should be removed from user group (optional)
   * @return ApiResponse&lt;ResponseContainerUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerUserGroup> removeUsersFromUserGroupWithHttpInfo(String id, List<String> body) throws ApiException {
    com.squareup.okhttp.Call call = removeUsersFromUserGroupValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Remove multiple users from a specific user group (asynchronously)
   *
   * @param id       (required)
   * @param body     List of users that should be removed from user group (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call removeUsersFromUserGroupAsync(String id, List<String> body, final ApiCallback<ResponseContainerUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = removeUsersFromUserGroupValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for revokePermissionFromUserGroups
   *
   * @param permission              Permission to revoke from user group(s). (required)
   * @param body                    List of user groups. (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call revokePermissionFromUserGroupsCall(String permission, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup/revoke/{permission}"
        .replaceAll("\\{" + "permission" + "\\}", apiClient.escapeString(permission.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call revokePermissionFromUserGroupsValidateBeforeCall(String permission, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'permission' is set
    if (permission == null) {
      throw new ApiException("Missing the required parameter 'permission' when calling revokePermissionFromUserGroups(Async)");
    }


    com.squareup.okhttp.Call call = revokePermissionFromUserGroupsCall(permission, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Revokes a single permission from user group(s)
   *
   * @param permission Permission to revoke from user group(s). (required)
   * @param body       List of user groups. (optional)
   * @return ResponseContainerUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerUserGroup revokePermissionFromUserGroups(String permission, List<String> body) throws ApiException {
    ApiResponse<ResponseContainerUserGroup> resp = revokePermissionFromUserGroupsWithHttpInfo(permission, body);
    return resp.getData();
  }

  /**
   * Revokes a single permission from user group(s)
   *
   * @param permission Permission to revoke from user group(s). (required)
   * @param body       List of user groups. (optional)
   * @return ApiResponse&lt;ResponseContainerUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerUserGroup> revokePermissionFromUserGroupsWithHttpInfo(String permission, List<String> body) throws ApiException {
    com.squareup.okhttp.Call call = revokePermissionFromUserGroupsValidateBeforeCall(permission, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Revokes a single permission from user group(s) (asynchronously)
   *
   * @param permission Permission to revoke from user group(s). (required)
   * @param body       List of user groups. (optional)
   * @param callback   The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call revokePermissionFromUserGroupsAsync(String permission, List<String> body, final ApiCallback<ResponseContainerUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = revokePermissionFromUserGroupsValidateBeforeCall(permission, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for updateUserGroup
   *
   * @param id                      (required)
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;id\&quot;: \&quot;UserGroup identifier\&quot;,   \&quot;name\&quot;: \&quot;UserGroup name\&quot;,   \&quot;permissions\&quot;: [   \&quot;permission1\&quot;,   \&quot;permission2\&quot;,   \&quot;permission3\&quot;   ] }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call updateUserGroupCall(String id, UserGroupWrite body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/usergroup/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call updateUserGroupValidateBeforeCall(String id, UserGroupWrite body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling updateUserGroup(Async)");
    }


    com.squareup.okhttp.Call call = updateUserGroupCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Update a specific user group
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;id\&quot;: \&quot;UserGroup identifier\&quot;,   \&quot;name\&quot;: \&quot;UserGroup name\&quot;,   \&quot;permissions\&quot;: [   \&quot;permission1\&quot;,   \&quot;permission2\&quot;,   \&quot;permission3\&quot;   ] }&lt;/pre&gt; (optional)
   * @return ResponseContainerUserGroup
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerUserGroup updateUserGroup(String id, UserGroupWrite body) throws ApiException {
    ApiResponse<ResponseContainerUserGroup> resp = updateUserGroupWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Update a specific user group
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;id\&quot;: \&quot;UserGroup identifier\&quot;,   \&quot;name\&quot;: \&quot;UserGroup name\&quot;,   \&quot;permissions\&quot;: [   \&quot;permission1\&quot;,   \&quot;permission2\&quot;,   \&quot;permission3\&quot;   ] }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerUserGroup&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerUserGroup> updateUserGroupWithHttpInfo(String id, UserGroupWrite body) throws ApiException {
    com.squareup.okhttp.Call call = updateUserGroupValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update a specific user group (asynchronously)
   *
   * @param id       (required)
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;id\&quot;: \&quot;UserGroup identifier\&quot;,   \&quot;name\&quot;: \&quot;UserGroup name\&quot;,   \&quot;permissions\&quot;: [   \&quot;permission1\&quot;,   \&quot;permission2\&quot;,   \&quot;permission3\&quot;   ] }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call updateUserGroupAsync(String id, UserGroupWrite body, final ApiCallback<ResponseContainerUserGroup> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = updateUserGroupValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerUserGroup>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
