/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.MaintenanceWindow;
import com.wavefront.rest.models.ResponseContainerMaintenanceWindow;
import com.wavefront.rest.models.ResponseContainerPagedMaintenanceWindow;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MaintenanceWindowApi {
  private ApiClient apiClient;

  public MaintenanceWindowApi() {
    this(Configuration.getDefaultApiClient());
  }

  public MaintenanceWindowApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for createMaintenanceWindow
   *
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;reason\&quot;: \&quot;MW Reason\&quot;,   \&quot;title\&quot;: \&quot;MW Title\&quot;,   \&quot;startTimeInSeconds\&quot;: 1483228800,   \&quot;endTimeInSeconds\&quot;: 1483232400,   \&quot;relevantCustomerTags\&quot;: [     \&quot;alertId1\&quot;   ],   \&quot;relevantHostTags\&quot;: [     \&quot;sourceTag1\&quot;   ] }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call createMaintenanceWindowCall(MaintenanceWindow body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/maintenancewindow";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call createMaintenanceWindowValidateBeforeCall(MaintenanceWindow body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = createMaintenanceWindowCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Create a maintenance window
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;reason\&quot;: \&quot;MW Reason\&quot;,   \&quot;title\&quot;: \&quot;MW Title\&quot;,   \&quot;startTimeInSeconds\&quot;: 1483228800,   \&quot;endTimeInSeconds\&quot;: 1483232400,   \&quot;relevantCustomerTags\&quot;: [     \&quot;alertId1\&quot;   ],   \&quot;relevantHostTags\&quot;: [     \&quot;sourceTag1\&quot;   ] }&lt;/pre&gt; (optional)
   * @return ResponseContainerMaintenanceWindow
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerMaintenanceWindow createMaintenanceWindow(MaintenanceWindow body) throws ApiException {
    ApiResponse<ResponseContainerMaintenanceWindow> resp = createMaintenanceWindowWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Create a maintenance window
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;reason\&quot;: \&quot;MW Reason\&quot;,   \&quot;title\&quot;: \&quot;MW Title\&quot;,   \&quot;startTimeInSeconds\&quot;: 1483228800,   \&quot;endTimeInSeconds\&quot;: 1483232400,   \&quot;relevantCustomerTags\&quot;: [     \&quot;alertId1\&quot;   ],   \&quot;relevantHostTags\&quot;: [     \&quot;sourceTag1\&quot;   ] }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerMaintenanceWindow&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerMaintenanceWindow> createMaintenanceWindowWithHttpInfo(MaintenanceWindow body) throws ApiException {
    com.squareup.okhttp.Call call = createMaintenanceWindowValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerMaintenanceWindow>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create a maintenance window (asynchronously)
   *
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;reason\&quot;: \&quot;MW Reason\&quot;,   \&quot;title\&quot;: \&quot;MW Title\&quot;,   \&quot;startTimeInSeconds\&quot;: 1483228800,   \&quot;endTimeInSeconds\&quot;: 1483232400,   \&quot;relevantCustomerTags\&quot;: [     \&quot;alertId1\&quot;   ],   \&quot;relevantHostTags\&quot;: [     \&quot;sourceTag1\&quot;   ] }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call createMaintenanceWindowAsync(MaintenanceWindow body, final ApiCallback<ResponseContainerMaintenanceWindow> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = createMaintenanceWindowValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerMaintenanceWindow>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for deleteMaintenanceWindow
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call deleteMaintenanceWindowCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/maintenancewindow/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call deleteMaintenanceWindowValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling deleteMaintenanceWindow(Async)");
    }


    com.squareup.okhttp.Call call = deleteMaintenanceWindowCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Delete a specific maintenance window
   *
   * @param id (required)
   * @return ResponseContainerMaintenanceWindow
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerMaintenanceWindow deleteMaintenanceWindow(String id) throws ApiException {
    ApiResponse<ResponseContainerMaintenanceWindow> resp = deleteMaintenanceWindowWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Delete a specific maintenance window
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerMaintenanceWindow&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerMaintenanceWindow> deleteMaintenanceWindowWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = deleteMaintenanceWindowValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerMaintenanceWindow>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete a specific maintenance window (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call deleteMaintenanceWindowAsync(String id, final ApiCallback<ResponseContainerMaintenanceWindow> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = deleteMaintenanceWindowValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerMaintenanceWindow>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllMaintenanceWindow
   *
   * @param offset                  (optional, default to 0)
   * @param limit                   (optional, default to 100)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllMaintenanceWindowCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/maintenancewindow";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (offset != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    if (limit != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllMaintenanceWindowValidateBeforeCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllMaintenanceWindowCall(offset, limit, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get all maintenance windows for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ResponseContainerPagedMaintenanceWindow
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedMaintenanceWindow getAllMaintenanceWindow(Integer offset, Integer limit) throws ApiException {
    ApiResponse<ResponseContainerPagedMaintenanceWindow> resp = getAllMaintenanceWindowWithHttpInfo(offset, limit);
    return resp.getData();
  }

  /**
   * Get all maintenance windows for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ApiResponse&lt;ResponseContainerPagedMaintenanceWindow&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedMaintenanceWindow> getAllMaintenanceWindowWithHttpInfo(Integer offset, Integer limit) throws ApiException {
    com.squareup.okhttp.Call call = getAllMaintenanceWindowValidateBeforeCall(offset, limit, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedMaintenanceWindow>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get all maintenance windows for a customer (asynchronously)
   *
   * @param offset   (optional, default to 0)
   * @param limit    (optional, default to 100)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllMaintenanceWindowAsync(Integer offset, Integer limit, final ApiCallback<ResponseContainerPagedMaintenanceWindow> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllMaintenanceWindowValidateBeforeCall(offset, limit, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedMaintenanceWindow>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getMaintenanceWindow
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getMaintenanceWindowCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/maintenancewindow/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getMaintenanceWindowValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getMaintenanceWindow(Async)");
    }


    com.squareup.okhttp.Call call = getMaintenanceWindowCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get a specific maintenance window
   *
   * @param id (required)
   * @return ResponseContainerMaintenanceWindow
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerMaintenanceWindow getMaintenanceWindow(String id) throws ApiException {
    ApiResponse<ResponseContainerMaintenanceWindow> resp = getMaintenanceWindowWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Get a specific maintenance window
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerMaintenanceWindow&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerMaintenanceWindow> getMaintenanceWindowWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getMaintenanceWindowValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerMaintenanceWindow>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get a specific maintenance window (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getMaintenanceWindowAsync(String id, final ApiCallback<ResponseContainerMaintenanceWindow> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getMaintenanceWindowValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerMaintenanceWindow>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for updateMaintenanceWindow
   *
   * @param id                      (required)
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;reason\&quot;: \&quot;MW Reason\&quot;,   \&quot;title\&quot;: \&quot;MW Title\&quot;,   \&quot;startTimeInSeconds\&quot;: 1483228800,   \&quot;endTimeInSeconds\&quot;: 1483232400,   \&quot;relevantCustomerTags\&quot;: [     \&quot;alertId1\&quot;   ],   \&quot;relevantHostTags\&quot;: [     \&quot;sourceTag1\&quot;   ] }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call updateMaintenanceWindowCall(String id, MaintenanceWindow body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/maintenancewindow/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call updateMaintenanceWindowValidateBeforeCall(String id, MaintenanceWindow body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling updateMaintenanceWindow(Async)");
    }


    com.squareup.okhttp.Call call = updateMaintenanceWindowCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Update a specific maintenance window
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;reason\&quot;: \&quot;MW Reason\&quot;,   \&quot;title\&quot;: \&quot;MW Title\&quot;,   \&quot;startTimeInSeconds\&quot;: 1483228800,   \&quot;endTimeInSeconds\&quot;: 1483232400,   \&quot;relevantCustomerTags\&quot;: [     \&quot;alertId1\&quot;   ],   \&quot;relevantHostTags\&quot;: [     \&quot;sourceTag1\&quot;   ] }&lt;/pre&gt; (optional)
   * @return ResponseContainerMaintenanceWindow
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerMaintenanceWindow updateMaintenanceWindow(String id, MaintenanceWindow body) throws ApiException {
    ApiResponse<ResponseContainerMaintenanceWindow> resp = updateMaintenanceWindowWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Update a specific maintenance window
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;reason\&quot;: \&quot;MW Reason\&quot;,   \&quot;title\&quot;: \&quot;MW Title\&quot;,   \&quot;startTimeInSeconds\&quot;: 1483228800,   \&quot;endTimeInSeconds\&quot;: 1483232400,   \&quot;relevantCustomerTags\&quot;: [     \&quot;alertId1\&quot;   ],   \&quot;relevantHostTags\&quot;: [     \&quot;sourceTag1\&quot;   ] }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerMaintenanceWindow&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerMaintenanceWindow> updateMaintenanceWindowWithHttpInfo(String id, MaintenanceWindow body) throws ApiException {
    com.squareup.okhttp.Call call = updateMaintenanceWindowValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerMaintenanceWindow>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update a specific maintenance window (asynchronously)
   *
   * @param id       (required)
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;reason\&quot;: \&quot;MW Reason\&quot;,   \&quot;title\&quot;: \&quot;MW Title\&quot;,   \&quot;startTimeInSeconds\&quot;: 1483228800,   \&quot;endTimeInSeconds\&quot;: 1483232400,   \&quot;relevantCustomerTags\&quot;: [     \&quot;alertId1\&quot;   ],   \&quot;relevantHostTags\&quot;: [     \&quot;sourceTag1\&quot;   ] }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call updateMaintenanceWindowAsync(String id, MaintenanceWindow body, final ApiCallback<ResponseContainerMaintenanceWindow> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = updateMaintenanceWindowValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerMaintenanceWindow>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
