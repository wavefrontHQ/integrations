/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.CloudIntegration;
import com.wavefront.rest.models.ResponseContainerCloudIntegration;
import com.wavefront.rest.models.ResponseContainerPagedCloudIntegration;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CloudIntegrationApi {
  private ApiClient apiClient;

  public CloudIntegrationApi() {
    this(Configuration.getDefaultApiClient());
  }

  public CloudIntegrationApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for createCloudIntegration
   *
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;name\&quot;:\&quot;CloudWatch integration\&quot;,   \&quot;service\&quot;:\&quot;CLOUDWATCH\&quot;,   \&quot;cloudWatch\&quot;:{     \&quot;baseCredentials\&quot;:{       \&quot;roleArn\&quot;:\&quot;arn:aws:iam::&amp;lt;accountid&amp;gt;:role/&amp;lt;rolename&amp;gt;\&quot;,       \&quot;externalId\&quot;:\&quot;wave123\&quot;     },     \&quot;metricFilterRegex\&quot;:\&quot;^aws.(sqs|ec2|ebs|elb).*$\&quot;,     \&quot;pointTagFilterRegex\&quot;:\&quot;(region|name)\&quot;   },   \&quot;serviceRefreshRateInMins\&quot;:5 }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call createCloudIntegrationCall(CloudIntegration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/cloudintegration";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call createCloudIntegrationValidateBeforeCall(CloudIntegration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = createCloudIntegrationCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Create a cloud integration
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;:\&quot;CloudWatch integration\&quot;,   \&quot;service\&quot;:\&quot;CLOUDWATCH\&quot;,   \&quot;cloudWatch\&quot;:{     \&quot;baseCredentials\&quot;:{       \&quot;roleArn\&quot;:\&quot;arn:aws:iam::&amp;lt;accountid&amp;gt;:role/&amp;lt;rolename&amp;gt;\&quot;,       \&quot;externalId\&quot;:\&quot;wave123\&quot;     },     \&quot;metricFilterRegex\&quot;:\&quot;^aws.(sqs|ec2|ebs|elb).*$\&quot;,     \&quot;pointTagFilterRegex\&quot;:\&quot;(region|name)\&quot;   },   \&quot;serviceRefreshRateInMins\&quot;:5 }&lt;/pre&gt; (optional)
   * @return ResponseContainerCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerCloudIntegration createCloudIntegration(CloudIntegration body) throws ApiException {
    ApiResponse<ResponseContainerCloudIntegration> resp = createCloudIntegrationWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Create a cloud integration
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;:\&quot;CloudWatch integration\&quot;,   \&quot;service\&quot;:\&quot;CLOUDWATCH\&quot;,   \&quot;cloudWatch\&quot;:{     \&quot;baseCredentials\&quot;:{       \&quot;roleArn\&quot;:\&quot;arn:aws:iam::&amp;lt;accountid&amp;gt;:role/&amp;lt;rolename&amp;gt;\&quot;,       \&quot;externalId\&quot;:\&quot;wave123\&quot;     },     \&quot;metricFilterRegex\&quot;:\&quot;^aws.(sqs|ec2|ebs|elb).*$\&quot;,     \&quot;pointTagFilterRegex\&quot;:\&quot;(region|name)\&quot;   },   \&quot;serviceRefreshRateInMins\&quot;:5 }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerCloudIntegration> createCloudIntegrationWithHttpInfo(CloudIntegration body) throws ApiException {
    com.squareup.okhttp.Call call = createCloudIntegrationValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create a cloud integration (asynchronously)
   *
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;name\&quot;:\&quot;CloudWatch integration\&quot;,   \&quot;service\&quot;:\&quot;CLOUDWATCH\&quot;,   \&quot;cloudWatch\&quot;:{     \&quot;baseCredentials\&quot;:{       \&quot;roleArn\&quot;:\&quot;arn:aws:iam::&amp;lt;accountid&amp;gt;:role/&amp;lt;rolename&amp;gt;\&quot;,       \&quot;externalId\&quot;:\&quot;wave123\&quot;     },     \&quot;metricFilterRegex\&quot;:\&quot;^aws.(sqs|ec2|ebs|elb).*$\&quot;,     \&quot;pointTagFilterRegex\&quot;:\&quot;(region|name)\&quot;   },   \&quot;serviceRefreshRateInMins\&quot;:5 }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call createCloudIntegrationAsync(CloudIntegration body, final ApiCallback<ResponseContainerCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = createCloudIntegrationValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for deleteCloudIntegration
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call deleteCloudIntegrationCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/cloudintegration/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call deleteCloudIntegrationValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling deleteCloudIntegration(Async)");
    }


    com.squareup.okhttp.Call call = deleteCloudIntegrationCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Delete a specific cloud integration
   *
   * @param id (required)
   * @return ResponseContainerCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerCloudIntegration deleteCloudIntegration(String id) throws ApiException {
    ApiResponse<ResponseContainerCloudIntegration> resp = deleteCloudIntegrationWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Delete a specific cloud integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerCloudIntegration> deleteCloudIntegrationWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = deleteCloudIntegrationValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete a specific cloud integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call deleteCloudIntegrationAsync(String id, final ApiCallback<ResponseContainerCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = deleteCloudIntegrationValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for disableCloudIntegration
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call disableCloudIntegrationCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/cloudintegration/{id}/disable"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call disableCloudIntegrationValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling disableCloudIntegration(Async)");
    }


    com.squareup.okhttp.Call call = disableCloudIntegrationCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Disable a specific cloud integration
   *
   * @param id (required)
   * @return ResponseContainerCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerCloudIntegration disableCloudIntegration(String id) throws ApiException {
    ApiResponse<ResponseContainerCloudIntegration> resp = disableCloudIntegrationWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Disable a specific cloud integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerCloudIntegration> disableCloudIntegrationWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = disableCloudIntegrationValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Disable a specific cloud integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call disableCloudIntegrationAsync(String id, final ApiCallback<ResponseContainerCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = disableCloudIntegrationValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for enableCloudIntegration
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call enableCloudIntegrationCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/cloudintegration/{id}/enable"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call enableCloudIntegrationValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling enableCloudIntegration(Async)");
    }


    com.squareup.okhttp.Call call = enableCloudIntegrationCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Enable a specific cloud integration
   *
   * @param id (required)
   * @return ResponseContainerCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerCloudIntegration enableCloudIntegration(String id) throws ApiException {
    ApiResponse<ResponseContainerCloudIntegration> resp = enableCloudIntegrationWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Enable a specific cloud integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerCloudIntegration> enableCloudIntegrationWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = enableCloudIntegrationValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Enable a specific cloud integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call enableCloudIntegrationAsync(String id, final ApiCallback<ResponseContainerCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = enableCloudIntegrationValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllCloudIntegration
   *
   * @param offset                  (optional, default to 0)
   * @param limit                   (optional, default to 100)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllCloudIntegrationCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/cloudintegration";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (offset != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    if (limit != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllCloudIntegrationValidateBeforeCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllCloudIntegrationCall(offset, limit, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get all cloud integrations for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ResponseContainerPagedCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedCloudIntegration getAllCloudIntegration(Integer offset, Integer limit) throws ApiException {
    ApiResponse<ResponseContainerPagedCloudIntegration> resp = getAllCloudIntegrationWithHttpInfo(offset, limit);
    return resp.getData();
  }

  /**
   * Get all cloud integrations for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ApiResponse&lt;ResponseContainerPagedCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedCloudIntegration> getAllCloudIntegrationWithHttpInfo(Integer offset, Integer limit) throws ApiException {
    com.squareup.okhttp.Call call = getAllCloudIntegrationValidateBeforeCall(offset, limit, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get all cloud integrations for a customer (asynchronously)
   *
   * @param offset   (optional, default to 0)
   * @param limit    (optional, default to 100)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllCloudIntegrationAsync(Integer offset, Integer limit, final ApiCallback<ResponseContainerPagedCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllCloudIntegrationValidateBeforeCall(offset, limit, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getCloudIntegration
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getCloudIntegrationCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/cloudintegration/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getCloudIntegrationValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getCloudIntegration(Async)");
    }


    com.squareup.okhttp.Call call = getCloudIntegrationCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get a specific cloud integration
   *
   * @param id (required)
   * @return ResponseContainerCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerCloudIntegration getCloudIntegration(String id) throws ApiException {
    ApiResponse<ResponseContainerCloudIntegration> resp = getCloudIntegrationWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Get a specific cloud integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerCloudIntegration> getCloudIntegrationWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getCloudIntegrationValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get a specific cloud integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getCloudIntegrationAsync(String id, final ApiCallback<ResponseContainerCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getCloudIntegrationValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for undeleteCloudIntegration
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call undeleteCloudIntegrationCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/cloudintegration/{id}/undelete"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call undeleteCloudIntegrationValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling undeleteCloudIntegration(Async)");
    }


    com.squareup.okhttp.Call call = undeleteCloudIntegrationCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Undelete a specific cloud integration
   *
   * @param id (required)
   * @return ResponseContainerCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerCloudIntegration undeleteCloudIntegration(String id) throws ApiException {
    ApiResponse<ResponseContainerCloudIntegration> resp = undeleteCloudIntegrationWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Undelete a specific cloud integration
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerCloudIntegration> undeleteCloudIntegrationWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = undeleteCloudIntegrationValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Undelete a specific cloud integration (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call undeleteCloudIntegrationAsync(String id, final ApiCallback<ResponseContainerCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = undeleteCloudIntegrationValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for updateCloudIntegration
   *
   * @param id                      (required)
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;name\&quot;:\&quot;CloudWatch integration\&quot;,   \&quot;service\&quot;:\&quot;CLOUDWATCH\&quot;,   \&quot;cloudWatch\&quot;:{     \&quot;baseCredentials\&quot;:{       \&quot;roleArn\&quot;:\&quot;arn:aws:iam::&amp;lt;accountid&amp;gt;:role/&amp;lt;rolename&amp;gt;\&quot;,       \&quot;externalId\&quot;:\&quot;wave123\&quot;     },     \&quot;metricFilterRegex\&quot;:\&quot;^aws.(sqs|ec2|ebs|elb).*$\&quot;,     \&quot;pointTagFilterRegex\&quot;:\&quot;(region|name)\&quot;   },   \&quot;serviceRefreshRateInMins\&quot;:5 }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call updateCloudIntegrationCall(String id, CloudIntegration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/cloudintegration/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call updateCloudIntegrationValidateBeforeCall(String id, CloudIntegration body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling updateCloudIntegration(Async)");
    }


    com.squareup.okhttp.Call call = updateCloudIntegrationCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Update a specific cloud integration
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;:\&quot;CloudWatch integration\&quot;,   \&quot;service\&quot;:\&quot;CLOUDWATCH\&quot;,   \&quot;cloudWatch\&quot;:{     \&quot;baseCredentials\&quot;:{       \&quot;roleArn\&quot;:\&quot;arn:aws:iam::&amp;lt;accountid&amp;gt;:role/&amp;lt;rolename&amp;gt;\&quot;,       \&quot;externalId\&quot;:\&quot;wave123\&quot;     },     \&quot;metricFilterRegex\&quot;:\&quot;^aws.(sqs|ec2|ebs|elb).*$\&quot;,     \&quot;pointTagFilterRegex\&quot;:\&quot;(region|name)\&quot;   },   \&quot;serviceRefreshRateInMins\&quot;:5 }&lt;/pre&gt; (optional)
   * @return ResponseContainerCloudIntegration
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerCloudIntegration updateCloudIntegration(String id, CloudIntegration body) throws ApiException {
    ApiResponse<ResponseContainerCloudIntegration> resp = updateCloudIntegrationWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Update a specific cloud integration
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;:\&quot;CloudWatch integration\&quot;,   \&quot;service\&quot;:\&quot;CLOUDWATCH\&quot;,   \&quot;cloudWatch\&quot;:{     \&quot;baseCredentials\&quot;:{       \&quot;roleArn\&quot;:\&quot;arn:aws:iam::&amp;lt;accountid&amp;gt;:role/&amp;lt;rolename&amp;gt;\&quot;,       \&quot;externalId\&quot;:\&quot;wave123\&quot;     },     \&quot;metricFilterRegex\&quot;:\&quot;^aws.(sqs|ec2|ebs|elb).*$\&quot;,     \&quot;pointTagFilterRegex\&quot;:\&quot;(region|name)\&quot;   },   \&quot;serviceRefreshRateInMins\&quot;:5 }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerCloudIntegration&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerCloudIntegration> updateCloudIntegrationWithHttpInfo(String id, CloudIntegration body) throws ApiException {
    com.squareup.okhttp.Call call = updateCloudIntegrationValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update a specific cloud integration (asynchronously)
   *
   * @param id       (required)
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;name\&quot;:\&quot;CloudWatch integration\&quot;,   \&quot;service\&quot;:\&quot;CLOUDWATCH\&quot;,   \&quot;cloudWatch\&quot;:{     \&quot;baseCredentials\&quot;:{       \&quot;roleArn\&quot;:\&quot;arn:aws:iam::&amp;lt;accountid&amp;gt;:role/&amp;lt;rolename&amp;gt;\&quot;,       \&quot;externalId\&quot;:\&quot;wave123\&quot;     },     \&quot;metricFilterRegex\&quot;:\&quot;^aws.(sqs|ec2|ebs|elb).*$\&quot;,     \&quot;pointTagFilterRegex\&quot;:\&quot;(region|name)\&quot;   },   \&quot;serviceRefreshRateInMins\&quot;:5 }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call updateCloudIntegrationAsync(String id, CloudIntegration body, final ApiCallback<ResponseContainerCloudIntegration> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = updateCloudIntegrationValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerCloudIntegration>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
