/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.Event;
import com.wavefront.rest.models.ResponseContainer;
import com.wavefront.rest.models.ResponseContainerEvent;
import com.wavefront.rest.models.ResponseContainerPagedEvent;
import com.wavefront.rest.models.ResponseContainerTagsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventApi {
  private ApiClient apiClient;

  public EventApi() {
    this(Configuration.getDefaultApiClient());
  }

  public EventApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for addEventTag
   *
   * @param id                      (required)
   * @param tagValue                (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call addEventTagCall(String id, String tagValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/event/{id}/tag/{tagValue}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "tagValue" + "\\}", apiClient.escapeString(tagValue.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call addEventTagValidateBeforeCall(String id, String tagValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling addEventTag(Async)");
    }

    // verify the required parameter 'tagValue' is set
    if (tagValue == null) {
      throw new ApiException("Missing the required parameter 'tagValue' when calling addEventTag(Async)");
    }


    com.squareup.okhttp.Call call = addEventTagCall(id, tagValue, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Add a tag to a specific event
   *
   * @param id       (required)
   * @param tagValue (required)
   * @return ResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainer addEventTag(String id, String tagValue) throws ApiException {
    ApiResponse<ResponseContainer> resp = addEventTagWithHttpInfo(id, tagValue);
    return resp.getData();
  }

  /**
   * Add a tag to a specific event
   *
   * @param id       (required)
   * @param tagValue (required)
   * @return ApiResponse&lt;ResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainer> addEventTagWithHttpInfo(String id, String tagValue) throws ApiException {
    com.squareup.okhttp.Call call = addEventTagValidateBeforeCall(id, tagValue, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Add a tag to a specific event (asynchronously)
   *
   * @param id       (required)
   * @param tagValue (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call addEventTagAsync(String id, String tagValue, final ApiCallback<ResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = addEventTagValidateBeforeCall(id, tagValue, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for closeEvent
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call closeEventCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/event/{id}/close"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call closeEventValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling closeEvent(Async)");
    }


    com.squareup.okhttp.Call call = closeEventCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Close a specific event
   *
   * @param id (required)
   * @return ResponseContainerEvent
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerEvent closeEvent(String id) throws ApiException {
    ApiResponse<ResponseContainerEvent> resp = closeEventWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Close a specific event
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerEvent&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerEvent> closeEventWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = closeEventValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Close a specific event (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call closeEventAsync(String id, final ApiCallback<ResponseContainerEvent> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = closeEventValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for createEvent
   *
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;Event API Example\&quot;,   \&quot;annotations\&quot;: {     \&quot;severity\&quot;: \&quot;info\&quot;,     \&quot;type\&quot;: \&quot;event type\&quot;,     \&quot;details\&quot;: \&quot;description\&quot;   },   \&quot;tags\&quot; : [     \&quot;eventTag1\&quot;   ],   \&quot;startTime\&quot;: 1490000000000,   \&quot;endTime\&quot;: 1490000000001 }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call createEventCall(Event body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/event";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call createEventValidateBeforeCall(Event body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = createEventCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Create a specific event
   * The following fields are readonly and will be ignored when passed in the request: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;isEphemeral&lt;/code&gt;, &lt;code&gt;isUserEvent&lt;/code&gt;, &lt;code&gt;runningState&lt;/code&gt;, &lt;code&gt;canDelete&lt;/code&gt;, &lt;code&gt;canClose&lt;/code&gt;, &lt;code&gt;creatorType&lt;/code&gt;, &lt;code&gt;createdAt&lt;/code&gt;, &lt;code&gt;updatedAt&lt;/code&gt;, &lt;code&gt;createdEpochMillis&lt;/code&gt;, &lt;code&gt;updatedEpochMillis&lt;/code&gt;, &lt;code&gt;updaterId&lt;/code&gt;, &lt;code&gt;creatorId&lt;/code&gt;, and &lt;code&gt;summarizedEvents&lt;/code&gt;
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;Event API Example\&quot;,   \&quot;annotations\&quot;: {     \&quot;severity\&quot;: \&quot;info\&quot;,     \&quot;type\&quot;: \&quot;event type\&quot;,     \&quot;details\&quot;: \&quot;description\&quot;   },   \&quot;tags\&quot; : [     \&quot;eventTag1\&quot;   ],   \&quot;startTime\&quot;: 1490000000000,   \&quot;endTime\&quot;: 1490000000001 }&lt;/pre&gt; (optional)
   * @return ResponseContainerEvent
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerEvent createEvent(Event body) throws ApiException {
    ApiResponse<ResponseContainerEvent> resp = createEventWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Create a specific event
   * The following fields are readonly and will be ignored when passed in the request: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;isEphemeral&lt;/code&gt;, &lt;code&gt;isUserEvent&lt;/code&gt;, &lt;code&gt;runningState&lt;/code&gt;, &lt;code&gt;canDelete&lt;/code&gt;, &lt;code&gt;canClose&lt;/code&gt;, &lt;code&gt;creatorType&lt;/code&gt;, &lt;code&gt;createdAt&lt;/code&gt;, &lt;code&gt;updatedAt&lt;/code&gt;, &lt;code&gt;createdEpochMillis&lt;/code&gt;, &lt;code&gt;updatedEpochMillis&lt;/code&gt;, &lt;code&gt;updaterId&lt;/code&gt;, &lt;code&gt;creatorId&lt;/code&gt;, and &lt;code&gt;summarizedEvents&lt;/code&gt;
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;Event API Example\&quot;,   \&quot;annotations\&quot;: {     \&quot;severity\&quot;: \&quot;info\&quot;,     \&quot;type\&quot;: \&quot;event type\&quot;,     \&quot;details\&quot;: \&quot;description\&quot;   },   \&quot;tags\&quot; : [     \&quot;eventTag1\&quot;   ],   \&quot;startTime\&quot;: 1490000000000,   \&quot;endTime\&quot;: 1490000000001 }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerEvent&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerEvent> createEventWithHttpInfo(Event body) throws ApiException {
    com.squareup.okhttp.Call call = createEventValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create a specific event (asynchronously)
   * The following fields are readonly and will be ignored when passed in the request: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;isEphemeral&lt;/code&gt;, &lt;code&gt;isUserEvent&lt;/code&gt;, &lt;code&gt;runningState&lt;/code&gt;, &lt;code&gt;canDelete&lt;/code&gt;, &lt;code&gt;canClose&lt;/code&gt;, &lt;code&gt;creatorType&lt;/code&gt;, &lt;code&gt;createdAt&lt;/code&gt;, &lt;code&gt;updatedAt&lt;/code&gt;, &lt;code&gt;createdEpochMillis&lt;/code&gt;, &lt;code&gt;updatedEpochMillis&lt;/code&gt;, &lt;code&gt;updaterId&lt;/code&gt;, &lt;code&gt;creatorId&lt;/code&gt;, and &lt;code&gt;summarizedEvents&lt;/code&gt;
   *
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;Event API Example\&quot;,   \&quot;annotations\&quot;: {     \&quot;severity\&quot;: \&quot;info\&quot;,     \&quot;type\&quot;: \&quot;event type\&quot;,     \&quot;details\&quot;: \&quot;description\&quot;   },   \&quot;tags\&quot; : [     \&quot;eventTag1\&quot;   ],   \&quot;startTime\&quot;: 1490000000000,   \&quot;endTime\&quot;: 1490000000001 }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call createEventAsync(Event body, final ApiCallback<ResponseContainerEvent> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = createEventValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for deleteEvent
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call deleteEventCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/event/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call deleteEventValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling deleteEvent(Async)");
    }


    com.squareup.okhttp.Call call = deleteEventCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Delete a specific event
   *
   * @param id (required)
   * @return ResponseContainerEvent
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerEvent deleteEvent(String id) throws ApiException {
    ApiResponse<ResponseContainerEvent> resp = deleteEventWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Delete a specific event
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerEvent&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerEvent> deleteEventWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = deleteEventValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete a specific event (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call deleteEventAsync(String id, final ApiCallback<ResponseContainerEvent> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = deleteEventValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllEventsWithTimeRange
   *
   * @param earliestStartTimeEpochMillis (optional)
   * @param latestStartTimeEpochMillis   (optional)
   * @param cursor                       (optional)
   * @param limit                        (optional, default to 100)
   * @param progressListener             Progress listener
   * @param progressRequestListener      Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllEventsWithTimeRangeCall(Long earliestStartTimeEpochMillis, Long latestStartTimeEpochMillis, String cursor, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/event";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (earliestStartTimeEpochMillis != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("earliestStartTimeEpochMillis", earliestStartTimeEpochMillis));
    if (latestStartTimeEpochMillis != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("latestStartTimeEpochMillis", latestStartTimeEpochMillis));
    if (cursor != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("cursor", cursor));
    if (limit != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllEventsWithTimeRangeValidateBeforeCall(Long earliestStartTimeEpochMillis, Long latestStartTimeEpochMillis, String cursor, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllEventsWithTimeRangeCall(earliestStartTimeEpochMillis, latestStartTimeEpochMillis, cursor, limit, progressListener, progressRequestListener);
    return call;

  }

  /**
   * List all the events for a customer within a time range
   *
   * @param earliestStartTimeEpochMillis (optional)
   * @param latestStartTimeEpochMillis   (optional)
   * @param cursor                       (optional)
   * @param limit                        (optional, default to 100)
   * @return ResponseContainerPagedEvent
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedEvent getAllEventsWithTimeRange(Long earliestStartTimeEpochMillis, Long latestStartTimeEpochMillis, String cursor, Integer limit) throws ApiException {
    ApiResponse<ResponseContainerPagedEvent> resp = getAllEventsWithTimeRangeWithHttpInfo(earliestStartTimeEpochMillis, latestStartTimeEpochMillis, cursor, limit);
    return resp.getData();
  }

  /**
   * List all the events for a customer within a time range
   *
   * @param earliestStartTimeEpochMillis (optional)
   * @param latestStartTimeEpochMillis   (optional)
   * @param cursor                       (optional)
   * @param limit                        (optional, default to 100)
   * @return ApiResponse&lt;ResponseContainerPagedEvent&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedEvent> getAllEventsWithTimeRangeWithHttpInfo(Long earliestStartTimeEpochMillis, Long latestStartTimeEpochMillis, String cursor, Integer limit) throws ApiException {
    com.squareup.okhttp.Call call = getAllEventsWithTimeRangeValidateBeforeCall(earliestStartTimeEpochMillis, latestStartTimeEpochMillis, cursor, limit, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedEvent>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * List all the events for a customer within a time range (asynchronously)
   *
   * @param earliestStartTimeEpochMillis (optional)
   * @param latestStartTimeEpochMillis   (optional)
   * @param cursor                       (optional)
   * @param limit                        (optional, default to 100)
   * @param callback                     The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllEventsWithTimeRangeAsync(Long earliestStartTimeEpochMillis, Long latestStartTimeEpochMillis, String cursor, Integer limit, final ApiCallback<ResponseContainerPagedEvent> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllEventsWithTimeRangeValidateBeforeCall(earliestStartTimeEpochMillis, latestStartTimeEpochMillis, cursor, limit, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedEvent>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getEvent
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getEventCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/event/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getEventValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getEvent(Async)");
    }


    com.squareup.okhttp.Call call = getEventCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get a specific event
   *
   * @param id (required)
   * @return ResponseContainerEvent
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerEvent getEvent(String id) throws ApiException {
    ApiResponse<ResponseContainerEvent> resp = getEventWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Get a specific event
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerEvent&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerEvent> getEventWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getEventValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get a specific event (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getEventAsync(String id, final ApiCallback<ResponseContainerEvent> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getEventValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getEventTags
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getEventTagsCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/event/{id}/tag"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getEventTagsValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getEventTags(Async)");
    }


    com.squareup.okhttp.Call call = getEventTagsCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get all tags associated with a specific event
   *
   * @param id (required)
   * @return ResponseContainerTagsResponse
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerTagsResponse getEventTags(String id) throws ApiException {
    ApiResponse<ResponseContainerTagsResponse> resp = getEventTagsWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Get all tags associated with a specific event
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerTagsResponse&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerTagsResponse> getEventTagsWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getEventTagsValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerTagsResponse>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get all tags associated with a specific event (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getEventTagsAsync(String id, final ApiCallback<ResponseContainerTagsResponse> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getEventTagsValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerTagsResponse>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for removeEventTag
   *
   * @param id                      (required)
   * @param tagValue                (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call removeEventTagCall(String id, String tagValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/event/{id}/tag/{tagValue}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()))
        .replaceAll("\\{" + "tagValue" + "\\}", apiClient.escapeString(tagValue.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call removeEventTagValidateBeforeCall(String id, String tagValue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling removeEventTag(Async)");
    }

    // verify the required parameter 'tagValue' is set
    if (tagValue == null) {
      throw new ApiException("Missing the required parameter 'tagValue' when calling removeEventTag(Async)");
    }


    com.squareup.okhttp.Call call = removeEventTagCall(id, tagValue, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Remove a tag from a specific event
   *
   * @param id       (required)
   * @param tagValue (required)
   * @return ResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainer removeEventTag(String id, String tagValue) throws ApiException {
    ApiResponse<ResponseContainer> resp = removeEventTagWithHttpInfo(id, tagValue);
    return resp.getData();
  }

  /**
   * Remove a tag from a specific event
   *
   * @param id       (required)
   * @param tagValue (required)
   * @return ApiResponse&lt;ResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainer> removeEventTagWithHttpInfo(String id, String tagValue) throws ApiException {
    com.squareup.okhttp.Call call = removeEventTagValidateBeforeCall(id, tagValue, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Remove a tag from a specific event (asynchronously)
   *
   * @param id       (required)
   * @param tagValue (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call removeEventTagAsync(String id, String tagValue, final ApiCallback<ResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = removeEventTagValidateBeforeCall(id, tagValue, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for setEventTags
   *
   * @param id                      (required)
   * @param body                    (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call setEventTagsCall(String id, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/event/{id}/tag"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call setEventTagsValidateBeforeCall(String id, List<String> body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling setEventTags(Async)");
    }


    com.squareup.okhttp.Call call = setEventTagsCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Set all tags associated with a specific event
   *
   * @param id   (required)
   * @param body (optional)
   * @return ResponseContainer
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainer setEventTags(String id, List<String> body) throws ApiException {
    ApiResponse<ResponseContainer> resp = setEventTagsWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Set all tags associated with a specific event
   *
   * @param id   (required)
   * @param body (optional)
   * @return ApiResponse&lt;ResponseContainer&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainer> setEventTagsWithHttpInfo(String id, List<String> body) throws ApiException {
    com.squareup.okhttp.Call call = setEventTagsValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainer>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Set all tags associated with a specific event (asynchronously)
   *
   * @param id       (required)
   * @param body     (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call setEventTagsAsync(String id, List<String> body, final ApiCallback<ResponseContainer> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = setEventTagsValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainer>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for updateEvent
   *
   * @param id                      (required)
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;Event API Example\&quot;,   \&quot;annotations\&quot;: {     \&quot;severity\&quot;: \&quot;info\&quot;,     \&quot;type\&quot;: \&quot;event type\&quot;,     \&quot;details\&quot;: \&quot;description\&quot;   },   \&quot;tags\&quot; : [     \&quot;eventTag1\&quot;   ],   \&quot;startTime\&quot;: 1490000000000,   \&quot;endTime\&quot;: 1490000000001 }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call updateEventCall(String id, Event body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/event/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call updateEventValidateBeforeCall(String id, Event body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling updateEvent(Async)");
    }


    com.squareup.okhttp.Call call = updateEventCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Update a specific event
   * The following fields are readonly and will be ignored when passed in the request: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;isEphemeral&lt;/code&gt;, &lt;code&gt;isUserEvent&lt;/code&gt;, &lt;code&gt;runningState&lt;/code&gt;, &lt;code&gt;canDelete&lt;/code&gt;, &lt;code&gt;canClose&lt;/code&gt;, &lt;code&gt;creatorType&lt;/code&gt;, &lt;code&gt;createdAt&lt;/code&gt;, &lt;code&gt;updatedAt&lt;/code&gt;, &lt;code&gt;createdEpochMillis&lt;/code&gt;, &lt;code&gt;updatedEpochMillis&lt;/code&gt;, &lt;code&gt;updaterId&lt;/code&gt;, &lt;code&gt;creatorId&lt;/code&gt;, and &lt;code&gt;summarizedEvents&lt;/code&gt;
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;Event API Example\&quot;,   \&quot;annotations\&quot;: {     \&quot;severity\&quot;: \&quot;info\&quot;,     \&quot;type\&quot;: \&quot;event type\&quot;,     \&quot;details\&quot;: \&quot;description\&quot;   },   \&quot;tags\&quot; : [     \&quot;eventTag1\&quot;   ],   \&quot;startTime\&quot;: 1490000000000,   \&quot;endTime\&quot;: 1490000000001 }&lt;/pre&gt; (optional)
   * @return ResponseContainerEvent
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerEvent updateEvent(String id, Event body) throws ApiException {
    ApiResponse<ResponseContainerEvent> resp = updateEventWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Update a specific event
   * The following fields are readonly and will be ignored when passed in the request: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;isEphemeral&lt;/code&gt;, &lt;code&gt;isUserEvent&lt;/code&gt;, &lt;code&gt;runningState&lt;/code&gt;, &lt;code&gt;canDelete&lt;/code&gt;, &lt;code&gt;canClose&lt;/code&gt;, &lt;code&gt;creatorType&lt;/code&gt;, &lt;code&gt;createdAt&lt;/code&gt;, &lt;code&gt;updatedAt&lt;/code&gt;, &lt;code&gt;createdEpochMillis&lt;/code&gt;, &lt;code&gt;updatedEpochMillis&lt;/code&gt;, &lt;code&gt;updaterId&lt;/code&gt;, &lt;code&gt;creatorId&lt;/code&gt;, and &lt;code&gt;summarizedEvents&lt;/code&gt;
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;Event API Example\&quot;,   \&quot;annotations\&quot;: {     \&quot;severity\&quot;: \&quot;info\&quot;,     \&quot;type\&quot;: \&quot;event type\&quot;,     \&quot;details\&quot;: \&quot;description\&quot;   },   \&quot;tags\&quot; : [     \&quot;eventTag1\&quot;   ],   \&quot;startTime\&quot;: 1490000000000,   \&quot;endTime\&quot;: 1490000000001 }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerEvent&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerEvent> updateEventWithHttpInfo(String id, Event body) throws ApiException {
    com.squareup.okhttp.Call call = updateEventValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update a specific event (asynchronously)
   * The following fields are readonly and will be ignored when passed in the request: &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;isEphemeral&lt;/code&gt;, &lt;code&gt;isUserEvent&lt;/code&gt;, &lt;code&gt;runningState&lt;/code&gt;, &lt;code&gt;canDelete&lt;/code&gt;, &lt;code&gt;canClose&lt;/code&gt;, &lt;code&gt;creatorType&lt;/code&gt;, &lt;code&gt;createdAt&lt;/code&gt;, &lt;code&gt;updatedAt&lt;/code&gt;, &lt;code&gt;createdEpochMillis&lt;/code&gt;, &lt;code&gt;updatedEpochMillis&lt;/code&gt;, &lt;code&gt;updaterId&lt;/code&gt;, &lt;code&gt;creatorId&lt;/code&gt;, and &lt;code&gt;summarizedEvents&lt;/code&gt;
   *
   * @param id       (required)
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;name\&quot;: \&quot;Event API Example\&quot;,   \&quot;annotations\&quot;: {     \&quot;severity\&quot;: \&quot;info\&quot;,     \&quot;type\&quot;: \&quot;event type\&quot;,     \&quot;details\&quot;: \&quot;description\&quot;   },   \&quot;tags\&quot; : [     \&quot;eventTag1\&quot;   ],   \&quot;startTime\&quot;: 1490000000000,   \&quot;endTime\&quot;: 1490000000001 }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call updateEventAsync(String id, Event body, final ApiCallback<ResponseContainerEvent> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = updateEventValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerEvent>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
