/*
 * Wavefront REST API
 * <p>The Wavefront REST API enables you to interact with Wavefront servers using standard REST API tools. You can use the REST API to automate commonly executed operations such as automatically tagging sources.</p><p>When you make REST API calls outside the Wavefront REST API documentation you must add the header \"Authorization: Bearer &lt;&lt;API-TOKEN&gt;&gt;\" to your HTTP requests.</p>
 *
 * OpenAPI spec version: v2
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wavefront.rest.api.client;

import com.wavefront.rest.api.ApiCallback;
import com.wavefront.rest.api.ApiClient;
import com.wavefront.rest.api.ApiException;
import com.wavefront.rest.api.ApiResponse;
import com.wavefront.rest.api.Configuration;
import com.wavefront.rest.api.Pair;
import com.wavefront.rest.api.ProgressRequestBody;
import com.wavefront.rest.api.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.wavefront.rest.models.Notificant;
import com.wavefront.rest.models.ResponseContainerNotificant;
import com.wavefront.rest.models.ResponseContainerPagedNotificant;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookApi {
  private ApiClient apiClient;

  public WebhookApi() {
    this(Configuration.getDefaultApiClient());
  }

  public WebhookApi(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  public ApiClient getApiClient() {
    return apiClient;
  }

  public void setApiClient(ApiClient apiClient) {
    this.apiClient = apiClient;
  }

  /**
   * Build call for createWebhook
   *
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;description\&quot;: \&quot;WebHook Description\&quot;,   \&quot;template\&quot;: \&quot;POST Body -- Mustache syntax\&quot;,   \&quot;title\&quot;: \&quot;WebHook Title\&quot;,   \&quot;triggers\&quot;: [     \&quot;ALERT_OPENED\&quot;   ],   \&quot;recipient\&quot;: \&quot;http://example.com\&quot;,   \&quot;customHttpHeaders\&quot;: {},   \&quot;contentType\&quot;: \&quot;text/plain\&quot; }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call createWebhookCall(Notificant body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/webhook";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call createWebhookValidateBeforeCall(Notificant body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = createWebhookCall(body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Create a specific webhook
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;description\&quot;: \&quot;WebHook Description\&quot;,   \&quot;template\&quot;: \&quot;POST Body -- Mustache syntax\&quot;,   \&quot;title\&quot;: \&quot;WebHook Title\&quot;,   \&quot;triggers\&quot;: [     \&quot;ALERT_OPENED\&quot;   ],   \&quot;recipient\&quot;: \&quot;http://example.com\&quot;,   \&quot;customHttpHeaders\&quot;: {},   \&quot;contentType\&quot;: \&quot;text/plain\&quot; }&lt;/pre&gt; (optional)
   * @return ResponseContainerNotificant
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerNotificant createWebhook(Notificant body) throws ApiException {
    ApiResponse<ResponseContainerNotificant> resp = createWebhookWithHttpInfo(body);
    return resp.getData();
  }

  /**
   * Create a specific webhook
   *
   * @param body Example Body:  &lt;pre&gt;{   \&quot;description\&quot;: \&quot;WebHook Description\&quot;,   \&quot;template\&quot;: \&quot;POST Body -- Mustache syntax\&quot;,   \&quot;title\&quot;: \&quot;WebHook Title\&quot;,   \&quot;triggers\&quot;: [     \&quot;ALERT_OPENED\&quot;   ],   \&quot;recipient\&quot;: \&quot;http://example.com\&quot;,   \&quot;customHttpHeaders\&quot;: {},   \&quot;contentType\&quot;: \&quot;text/plain\&quot; }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerNotificant&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerNotificant> createWebhookWithHttpInfo(Notificant body) throws ApiException {
    com.squareup.okhttp.Call call = createWebhookValidateBeforeCall(body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerNotificant>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Create a specific webhook (asynchronously)
   *
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;description\&quot;: \&quot;WebHook Description\&quot;,   \&quot;template\&quot;: \&quot;POST Body -- Mustache syntax\&quot;,   \&quot;title\&quot;: \&quot;WebHook Title\&quot;,   \&quot;triggers\&quot;: [     \&quot;ALERT_OPENED\&quot;   ],   \&quot;recipient\&quot;: \&quot;http://example.com\&quot;,   \&quot;customHttpHeaders\&quot;: {},   \&quot;contentType\&quot;: \&quot;text/plain\&quot; }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call createWebhookAsync(Notificant body, final ApiCallback<ResponseContainerNotificant> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = createWebhookValidateBeforeCall(body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerNotificant>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for deleteWebhook
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call deleteWebhookCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/webhook/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call deleteWebhookValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling deleteWebhook(Async)");
    }


    com.squareup.okhttp.Call call = deleteWebhookCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Delete a specific webhook
   *
   * @param id (required)
   * @return ResponseContainerNotificant
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerNotificant deleteWebhook(String id) throws ApiException {
    ApiResponse<ResponseContainerNotificant> resp = deleteWebhookWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Delete a specific webhook
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerNotificant&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerNotificant> deleteWebhookWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = deleteWebhookValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerNotificant>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Delete a specific webhook (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call deleteWebhookAsync(String id, final ApiCallback<ResponseContainerNotificant> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = deleteWebhookValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerNotificant>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getAllWebhooks
   *
   * @param offset                  (optional, default to 0)
   * @param limit                   (optional, default to 100)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getAllWebhooksCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/webhook";

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    if (offset != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("offset", offset));
    if (limit != null)
      localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getAllWebhooksValidateBeforeCall(Integer offset, Integer limit, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {


    com.squareup.okhttp.Call call = getAllWebhooksCall(offset, limit, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get all webhooks for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ResponseContainerPagedNotificant
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerPagedNotificant getAllWebhooks(Integer offset, Integer limit) throws ApiException {
    ApiResponse<ResponseContainerPagedNotificant> resp = getAllWebhooksWithHttpInfo(offset, limit);
    return resp.getData();
  }

  /**
   * Get all webhooks for a customer
   *
   * @param offset (optional, default to 0)
   * @param limit  (optional, default to 100)
   * @return ApiResponse&lt;ResponseContainerPagedNotificant&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerPagedNotificant> getAllWebhooksWithHttpInfo(Integer offset, Integer limit) throws ApiException {
    com.squareup.okhttp.Call call = getAllWebhooksValidateBeforeCall(offset, limit, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedNotificant>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get all webhooks for a customer (asynchronously)
   *
   * @param offset   (optional, default to 0)
   * @param limit    (optional, default to 100)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getAllWebhooksAsync(Integer offset, Integer limit, final ApiCallback<ResponseContainerPagedNotificant> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getAllWebhooksValidateBeforeCall(offset, limit, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerPagedNotificant>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for getWebhook
   *
   * @param id                      (required)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call getWebhookCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = null;

    // create path and map variables
    String localVarPath = "/api/v2/webhook/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {

    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call getWebhookValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling getWebhook(Async)");
    }


    com.squareup.okhttp.Call call = getWebhookCall(id, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Get a specific webhook
   *
   * @param id (required)
   * @return ResponseContainerNotificant
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerNotificant getWebhook(String id) throws ApiException {
    ApiResponse<ResponseContainerNotificant> resp = getWebhookWithHttpInfo(id);
    return resp.getData();
  }

  /**
   * Get a specific webhook
   *
   * @param id (required)
   * @return ApiResponse&lt;ResponseContainerNotificant&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerNotificant> getWebhookWithHttpInfo(String id) throws ApiException {
    com.squareup.okhttp.Call call = getWebhookValidateBeforeCall(id, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerNotificant>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Get a specific webhook (asynchronously)
   *
   * @param id       (required)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call getWebhookAsync(String id, final ApiCallback<ResponseContainerNotificant> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = getWebhookValidateBeforeCall(id, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerNotificant>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }

  /**
   * Build call for updateWebhook
   *
   * @param id                      (required)
   * @param body                    Example Body:  &lt;pre&gt;{   \&quot;description\&quot;: \&quot;WebHook Description\&quot;,   \&quot;template\&quot;: \&quot;POST Body -- Mustache syntax\&quot;,   \&quot;title\&quot;: \&quot;WebHook Title\&quot;,   \&quot;triggers\&quot;: [     \&quot;ALERT_OPENED\&quot;   ],   \&quot;recipient\&quot;: \&quot;http://example.com\&quot;,   \&quot;customHttpHeaders\&quot;: {},   \&quot;contentType\&quot;: \&quot;text/plain\&quot; }&lt;/pre&gt; (optional)
   * @param progressListener        Progress listener
   * @param progressRequestListener Progress request listener
   * @return Call to execute
   * @throws ApiException If fail to serialize the request body object
   */
  public com.squareup.okhttp.Call updateWebhookCall(String id, Notificant body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
    Object localVarPostBody = body;

    // create path and map variables
    String localVarPath = "/api/v2/webhook/{id}"
        .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

    Map<String, String> localVarHeaderParams = new HashMap<String, String>();

    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    final String[] localVarAccepts = {
        "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
    if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

    final String[] localVarContentTypes = {
        "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
    localVarHeaderParams.put("Content-Type", localVarContentType);

    if (progressListener != null) {
      apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
        @Override
        public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
          com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
          return originalResponse.newBuilder()
              .body(new ProgressResponseBody(originalResponse.body(), progressListener))
              .build();
        }
      });
    }

    String[] localVarAuthNames = new String[]{"api_key"};
    return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
  }

  @SuppressWarnings("rawtypes")
  private com.squareup.okhttp.Call updateWebhookValidateBeforeCall(String id, Notificant body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {

    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException("Missing the required parameter 'id' when calling updateWebhook(Async)");
    }


    com.squareup.okhttp.Call call = updateWebhookCall(id, body, progressListener, progressRequestListener);
    return call;

  }

  /**
   * Update a specific webhook
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;description\&quot;: \&quot;WebHook Description\&quot;,   \&quot;template\&quot;: \&quot;POST Body -- Mustache syntax\&quot;,   \&quot;title\&quot;: \&quot;WebHook Title\&quot;,   \&quot;triggers\&quot;: [     \&quot;ALERT_OPENED\&quot;   ],   \&quot;recipient\&quot;: \&quot;http://example.com\&quot;,   \&quot;customHttpHeaders\&quot;: {},   \&quot;contentType\&quot;: \&quot;text/plain\&quot; }&lt;/pre&gt; (optional)
   * @return ResponseContainerNotificant
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ResponseContainerNotificant updateWebhook(String id, Notificant body) throws ApiException {
    ApiResponse<ResponseContainerNotificant> resp = updateWebhookWithHttpInfo(id, body);
    return resp.getData();
  }

  /**
   * Update a specific webhook
   *
   * @param id   (required)
   * @param body Example Body:  &lt;pre&gt;{   \&quot;description\&quot;: \&quot;WebHook Description\&quot;,   \&quot;template\&quot;: \&quot;POST Body -- Mustache syntax\&quot;,   \&quot;title\&quot;: \&quot;WebHook Title\&quot;,   \&quot;triggers\&quot;: [     \&quot;ALERT_OPENED\&quot;   ],   \&quot;recipient\&quot;: \&quot;http://example.com\&quot;,   \&quot;customHttpHeaders\&quot;: {},   \&quot;contentType\&quot;: \&quot;text/plain\&quot; }&lt;/pre&gt; (optional)
   * @return ApiResponse&lt;ResponseContainerNotificant&gt;
   * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
   */
  public ApiResponse<ResponseContainerNotificant> updateWebhookWithHttpInfo(String id, Notificant body) throws ApiException {
    com.squareup.okhttp.Call call = updateWebhookValidateBeforeCall(id, body, null, null);
    Type localVarReturnType = new TypeToken<ResponseContainerNotificant>() {
    }.getType();
    return apiClient.execute(call, localVarReturnType);
  }

  /**
   * Update a specific webhook (asynchronously)
   *
   * @param id       (required)
   * @param body     Example Body:  &lt;pre&gt;{   \&quot;description\&quot;: \&quot;WebHook Description\&quot;,   \&quot;template\&quot;: \&quot;POST Body -- Mustache syntax\&quot;,   \&quot;title\&quot;: \&quot;WebHook Title\&quot;,   \&quot;triggers\&quot;: [     \&quot;ALERT_OPENED\&quot;   ],   \&quot;recipient\&quot;: \&quot;http://example.com\&quot;,   \&quot;customHttpHeaders\&quot;: {},   \&quot;contentType\&quot;: \&quot;text/plain\&quot; }&lt;/pre&gt; (optional)
   * @param callback The callback to be executed when the API call finishes
   * @return The request call
   * @throws ApiException If fail to process the API call, e.g. serializing the request body object
   */
  public com.squareup.okhttp.Call updateWebhookAsync(String id, Notificant body, final ApiCallback<ResponseContainerNotificant> callback) throws ApiException {

    ProgressResponseBody.ProgressListener progressListener = null;
    ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

    if (callback != null) {
      progressListener = new ProgressResponseBody.ProgressListener() {
        @Override
        public void update(long bytesRead, long contentLength, boolean done) {
          callback.onDownloadProgress(bytesRead, contentLength, done);
        }
      };

      progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
        @Override
        public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
          callback.onUploadProgress(bytesWritten, contentLength, done);
        }
      };
    }

    com.squareup.okhttp.Call call = updateWebhookValidateBeforeCall(id, body, progressListener, progressRequestListener);
    Type localVarReturnType = new TypeToken<ResponseContainerNotificant>() {
    }.getType();
    apiClient.executeAsync(call, localVarReturnType, callback);
    return call;
  }
}
